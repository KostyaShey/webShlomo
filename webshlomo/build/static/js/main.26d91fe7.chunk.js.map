{"version":3,"sources":["components/AddRow/AddRow.js","components/SumRow/SumRow.js","components/TitleRow/TitleRow.js","components/InputRow/InputRow.js","components/ItemRow/EditItem/EditItem.js","components/ItemRow/ShowItem/ShowItem.js","components/ItemRow/EditRecurrentItem/EditRecurrentItem.js","components/ItemRow/ItemRow.js","components/NoData/NoData.js","components/AllRowsOfType/AllRowsOfType.js","components/MonthChanger/MonthChanger.js","components/SumMonthData/SumMonthData.js","components/TextRow/TextRow.js","components/InputRowRecurrent/InputRowRecurrent.js","components/MDataSummary/MDataSummary.js","containers/MDataSummaryContainer.js","components/BalanceRow/BalanceRow.js","components/App/App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["AddRow","props","className","onClick","setShowInputRow","showInputRow","typeOfData","SumRow","this","total","Component","TitleRow","name","toUpperCase","InputRow","useState","userInput","setUserInput","handleChange","target","value","prev","handleSubmit","event","a","preventDefault","newData","inputTitle","parseInt","inputValue","month","date","selectedMonth","year","selectedYear","writeToDB","onSubmit","type","placeholder","onChange","EditItem","item","data","id","_id","updateInDB","setEditMode","ShowItem","handleClickDelete","deleteFromDB","checkInactiveClass","useRef","isActive","current","EditRecurrentItem","yearsArray","Array","from","length","END","x","i","selectedYears","endYear","Math","max","startYear","min","validationWarning","array","newValue","validateYears","newMonthArray","includes","filter","push","disabled","label","map","key","checked","htmlFor","defaultValue","ItemRow","editMode","isMonthData","NoData","AllRowsOfType","MonthChanger","didMountRef","useEffect","readAllCollectionsFromDB","changeMonth","SumMonthData","valueSum","reduce","currentSum","setShowDetails","TextRow","text","InputRowRecurrent","console","log","userYearArray","MDataSummary","titles","textForActive","textForInactive","showDetails","didSplit","active","arrayIsEmpty","inactive","MDataSummaryContainer","setdidSplit","splitData","setSplitData","slitDataForState","splitDataFunction","BalanceRow","mIncomeTotal","incomeTotal","mExpensesTotal","expensesTotal","App","loading","expenses","readFromDB","income","mExpenses","mIncome","AppContainer","state","currentMonth","Date","getMonth","currentYear","getFullYear","bind","fetch","method","headers","then","response","json","setState","collections","body","JSON","stringify","updatedData","increment","newMonth","newYear","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wiBAGe,SAASA,EAAOC,GAS7B,OACE,yBAAKC,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,uBAAGC,QAAS,kBAAMF,EAAMG,iBAAiBH,EAAMI,eAAeH,UAAU,kBAAiB,uBAAGA,UAAU,uBAAtG,QAXK,CACb,SAAY,WACZ,OAAU,SACV,UAAa,qBACb,QAAW,oBAOyID,EAAMK,cAEtJ,yBAAKJ,UAAU,UACf,yBAAKA,UAAU,Y,ICjBFK,E,uKAIb,OACI,yBAAKL,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACb,oCAEF,yBAAKA,UAAU,cACb,uBAAGA,UAAU,gBAAgBM,KAAKP,MAAMQ,MAAxC,YAEF,yBAAKP,UAAU,gB,GAbKQ,aCArB,SAASC,EAASV,GAS/B,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACb,2BAXS,CACb,SAAY,WACZ,OAAU,SACV,UAAa,qBACb,QAAW,oBAOID,EAAMW,MAAMC,gBAEzB,yBAAKX,UAAU,UACf,yBAAKA,UAAU,Y,YCfN,SAASY,EAASb,GAAQ,IAAD,EAGFc,mBAAS,IAHP,mBAG7BC,EAH6B,KAGlBC,EAHkB,KAK9BC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZP,EAAgBO,EAAhBP,KAAMQ,EAAUD,EAAVC,MACdH,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,kBAERT,EAAOQ,QAIVE,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACjBD,EAAME,iBACAC,EAAU,CACZd,KAAMI,EAAUW,WAChBP,MAAOQ,SAASZ,EAAUa,YAC1BC,MAAO7B,EAAM8B,KAAKC,cAAe,EACjCC,KAAMhC,EAAM8B,KAAKG,cAErBjC,EAAMkC,UAAUT,EAASzB,EAAMK,YAC/BW,EAAa,CAACU,WAAW,GAAIE,WAAW,KATvB,2CAAH,sDAalB,OACI,0BAAMO,SAAUd,GACR,yBAAKpB,UAAU,eACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRzB,KAAK,aACLQ,MAAOJ,EAAUW,WACjBW,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,cACX,2BAAOmC,KAAK,SACRzB,KAAK,aACLQ,MAAOJ,EAAUa,WACjBS,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,6BACX,4BAAQmC,KAAK,UAAb,UACA,4BAAQA,KAAK,SAASlC,QAAS,kBAAMF,EAAMG,iBAAiBH,EAAMI,gBAAlE,a,YC9CT,SAASmC,EAASvC,GAAQ,IAAD,EAEFc,mBAAS,CACPH,KAAMX,EAAMwC,KAAK7B,KACjBQ,MAAOnB,EAAMwC,KAAKrB,QAJlB,mBAE7BJ,EAF6B,KAElBC,EAFkB,KAQ9BC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZP,EAAgBO,EAAhBP,KAAMQ,EAAUD,EAAVC,MAENH,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,kBAERT,EAAOQ,QAIlBE,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACjBD,EAAME,kBACFiB,EAAO1B,GACN2B,GAAK1C,EAAMwC,KAAKG,IAAX,KACVF,EAAKZ,MAAQ7B,EAAM8B,KAAKC,cAAe,EACvCU,EAAKT,KAAOhC,EAAM8B,KAAKG,aACvBjC,EAAM4C,WAAWH,EACbzC,EAAMK,YACVL,EAAM6C,cARW,2CAAH,sDAgBd,OACI,0BAAMV,SAAUd,GACZ,yBAAKpB,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRzB,KAAK,OACLQ,MAAOJ,EAAUJ,KACjB0B,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,cACX,2BAAOmC,KAAK,SACRzB,KAAK,QACLQ,MAAOJ,EAAUI,MACjBkB,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,gBACX,4BAAQmC,KAAK,SAASlC,QAxBd,SAACoB,GACzBA,EAAME,iBACNxB,EAAM6C,gBAsBU,UACA,4BAAQT,KAAK,UAAb,a,MCrDT,SAASU,EAAS9C,GAE7B,IAAM+C,EAAiB,uCAAG,sBAAAxB,EAAA,sDACtBvB,EAAMgD,aAAahD,EAAMwC,KAAKG,IAAX,KAAwB3C,EAAMK,YAD3B,2CAAH,qDAIjB4C,EAAqBC,iBAAO,IAQlC,OANKlD,EAAMmD,SAGPF,EAAmBG,QAAU,WAF7BH,EAAmBG,QAAU,oBAM7B,yBAAKnD,UAAWgD,EAAmBG,SAC/B,yBAAKnD,UAAU,eACf,yBAAKA,UAAU,qBACX,2BAAID,EAAMwC,KAAK7B,OAEnB,yBAAKV,UAAU,SACX,uBAAGA,UAAU,gBAAgBD,EAAMwC,KAAKrB,MAAxC,YAEJ,yBAAKlB,UAAU,gBACX,4BAAQmC,KAAK,SAASlC,QAASF,EAAM6C,aAArC,UACA,4BAAQT,KAAK,SAASlC,QAAS6C,GAA/B,Y,kBCzBD,SAASM,EAAkBrD,GAAQ,IAAD,EAGXc,mBAAS,CACPH,KAAMX,EAAMwC,KAAK7B,KACjBQ,MAAOnB,EAAMwC,KAAKrB,MAClBU,MAAO7B,EAAMwC,KAAKX,MAClBG,KAAMhC,EAAMwC,KAAKR,OAPR,mBAGtCjB,EAHsC,KAG3BC,EAH2B,KA0BvCsC,EAAaC,MAAMC,KAAK,CAACC,OAAQC,KAAY,SAACC,EAAGC,GAAJ,OAAUA,EADjD,QAGNC,EAAgBX,iBAAO,CACzBY,QAASC,KAAKC,IAAL,MAAAD,KAAI,YAAQhD,EAAUiB,OAC/BiC,UAAWF,KAAKG,IAAL,MAAAH,KAAI,YAAQhD,EAAUiB,SAG/BmC,EAAoBjB,iBAAO,IAuB3BjC,EAAe,SAAC,GAAgB,IATZmD,EAAOC,EASTnD,EAAa,EAAbA,OACZP,EAAsBO,EAAtBP,KAAMQ,EAAgBD,EAAhBC,MAEd,OAF8BD,EAATkB,MAGjB,IAAK,aACD+B,EAAkBf,QAxBR,SAACzC,EAAMQ,GACzB,MAAa,cAATR,GAAwBQ,EAAQ0C,EAAcT,QAAQU,SAEtC,YAATnD,GAAsBQ,EAAQ0C,EAAcT,QAAQa,UADpD,mBAIA,GAkByBK,CAAc3D,EAAMQ,GAChD0C,EAAcT,QAAQzC,GAAQgB,SAASR,GACvCH,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,IAETY,KAAMuB,MAAMC,KAAK,CAACC,OAAQI,EAAcT,QAAQU,QAAQD,EAAcT,QAAQa,UAAU,IAAI,SAACN,EAAGC,GAAJ,OAAUA,EAAEC,EAAcT,QAAQa,kBAElI,MACJ,IAAK,WACD,IAAMM,GAtBQH,EAsByBrD,EAAUc,MAtB5BwC,EAsBmC1C,SAAShB,GArBrEyD,EAAMI,SAASH,GACfD,EAAQA,EAAMK,QAAO,SAAAjC,GAAI,OAAIA,IAAS6B,KAEtCD,EAAMM,KAAKL,GAERD,GAiBCpD,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,IAETS,MAAO0C,OAEX,MACJ,QACIvD,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,kBAERT,EAAOQ,SAKlBE,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACjBD,EAAME,kBACFiB,EAAO1B,GACN2B,GAAK1C,EAAMwC,KAAKG,IAAX,KACV3C,EAAM4C,WAAWH,EACbzC,EAAMK,YACVL,EAAM6C,cANW,2CAAH,sDA4Bd,OACI,0BAAMV,SAAUd,GACZ,yBAAKpB,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRzB,KAAK,OACLQ,MAAOJ,EAAUJ,KACjB0B,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,cACX,2BAAOmC,KAAK,SACRzB,KAAK,QACLQ,MAAOJ,EAAUI,MACjBkB,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,gBACX,4BAAQmC,KAAK,SAASlC,QAtCd,SAACoB,GACzBA,EAAME,iBACNxB,EAAM6C,gBAoCU,UACA,4BAAQT,KAAK,SAASuC,SAAUR,EAAkBf,SAAlD,YAGR,yBAAKnD,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,UA9HZ,CACf,CAACU,KAAM,UAAWiE,MAAO,GACzB,CAACjE,KAAM,WAAYiE,MAAO,GAC1B,CAACjE,KAAM,QAASiE,MAAO,GACvB,CAACjE,KAAM,QAASiE,MAAO,GACvB,CAACjE,KAAM,MAAOiE,MAAO,GACrB,CAACjE,KAAM,OAAQiE,MAAO,GACtB,CAACjE,KAAM,OAAQiE,MAAO,GACtB,CAACjE,KAAM,SAAUiE,MAAO,GACxB,CAACjE,KAAM,YAAaiE,MAAO,GAC3B,CAACjE,KAAM,UAAWiE,MAAO,IACzB,CAACjE,KAAM,WAAYiE,MAAO,IAC1B,CAACjE,KAAM,WAAYiE,MAAO,KAmHEC,KAAI,SAAArC,GAAI,OAxChBX,EAwCmCW,EAtCnD,2BAAOsC,IAAKjD,EAAM+C,OACd,2BACIxC,KAAK,WACLzB,KAAMkB,EAAM+C,MACZG,QAAShE,EAAUc,MAAM2C,SAAS3C,EAAM+C,OACxCtC,SAAUrB,IAEbY,EAAMlB,MATI,IAACkB,OA2CZ,yBAAK5B,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,WACX,2BAAO+E,QAAQ,aAAf,kBACA,4BAAQtC,GAAG,YAAY/B,KAAK,YAAYsE,aAAcpB,EAAcT,QAAQa,UAAW3B,SAAUrB,GAC5FqC,EAAWuB,KAAI,SAAA7C,GAAI,OAAI,4BAAQb,MAAOa,EAAM8C,IAAK9C,GAAOA,OAE7D,2BAAOgD,QAAQ,WAAf,aACA,4BAAQtC,GAAG,UAAU/B,KAAK,UAAUsE,aAAcpB,EAAcT,QAAQU,QAASxB,SAAUrB,GACtFqC,EAAWuB,KAAI,SAAA7C,GAAI,OAAI,4BAAQb,MAAOa,EAAM8C,IAAK9C,GAAOA,OAE5DmC,EAAkBf,SAAW,4ECpJ3C,SAAS8B,EAAQlF,GAAQ,IAAD,EAEHc,oBAAS,GAFN,mBAE5BqE,EAF4B,KAElBtC,EAFkB,KAInC,OAAIsC,IAAanF,EAAMoF,YAEf,kBAAC,EAAD,CACIvC,YAAaA,EACbL,KAAMxC,EAAMwC,KACZnC,WAAYL,EAAMK,WAClBuC,WAAY5C,EAAM4C,WAClBd,KAAM9B,EAAM8B,KACZsD,YAAapF,EAAMoF,cAGpBD,GAAYnF,EAAMoF,YAErB,kBAAC,EAAD,CACIvC,YAAaA,EACbL,KAAMxC,EAAMwC,KACZnC,WAAYL,EAAMK,WAClBuC,WAAY5C,EAAM4C,WAClBd,KAAM9B,EAAM8B,KACZsD,YAAapF,EAAMoF,cAKvB,kBAAC,EAAD,CACIvC,YAAaA,EACbL,KAAMxC,EAAMwC,KACZnC,WAAYL,EAAMK,WAClB2C,aAAchD,EAAMgD,aACpBlB,KAAM9B,EAAM8B,KACZqB,SAAUnD,EAAMmD,W,MCpCjB,SAASkC,EAAOrF,GAG3B,OACI,6BACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,SACX,uBAAGA,UAAU,UAAb,oBAAuC,6BAAvC,4BCHL,SAASqF,EAActF,GAAQ,IAAD,EAEDc,oBAAS,GAFR,mBAElCV,EAFkC,KAEpBD,EAFoB,KAIzC,OAA0B,IAAtBH,EAAMyC,KAAKgB,OAEP,6BACI,6BACI,kBAAC/C,EAAD,CAAUC,KAAMX,EAAMK,aACtB,kBAAC,EAAD,CACIA,WAAYL,EAAMK,WAClB6B,UAAWlC,EAAMkC,UACjBJ,KAAM9B,EAAM8B,SAOpB,6BACI,kBAACpB,EAAD,CAAUC,KAAMX,EAAMK,aACrBL,EAAMyC,KAAKoC,KAAI,SAAArC,GAAI,OAAI,kBAAC,EAAD,CACpBA,KAAMA,EACNnC,WAAYL,EAAMK,WAClB2C,aAAchD,EAAMgD,aACpBJ,WAAY5C,EAAM4C,WAClBd,KAAM9B,EAAM8B,KACZgD,IAAKtC,EAAKG,IAAL,KACLQ,UAAU,OAEd,kBAAC,EAAD,CAAQ3C,MAAOR,EAAMQ,SACnBJ,GAAgB,kBAAE,EAAF,CACdD,gBAAiBA,EACjBC,aAAcA,EACdC,WAAYL,EAAMK,aAErBD,GAAgB,kBAAC,EAAD,CACbD,gBAAiBA,EACjBC,aAAcA,EACd8B,UAAWlC,EAAMkC,UACjBJ,KAAM9B,EAAM8B,KACZzB,WAAYL,EAAMK,c,MC/C3B,SAASkF,EAAavF,GAEjC,IAUMwF,EAActC,kBAAO,GAQ3B,OANAuC,qBAAU,WACFD,EAAYpC,QACZpD,EAAM0F,yBAAyB1F,EAAM8B,KAAKC,cAAe/B,EAAM8B,KAAKG,cACjEuD,EAAYpC,SAAU,IAC9B,CAACpD,EAAM8B,KAAKC,gBAGX,yBAAK9B,UAAU,gBACP,yBAAKA,UAAU,aACX,4BAAQmC,KAAK,SAASlC,QAfd,WACpBF,EAAM2F,aAAa,KAcP,WAEJ,yBAAK1F,UAAU,gBAvBb,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAwB3FD,EAAM8B,KAAKC,eADtB,KACwC/B,EAAM8B,KAAKG,cAEnD,yBAAKhC,UAAU,aACX,4BAAQmC,KAAK,SAASlC,QAzBd,WACpBF,EAAM2F,YAAY,KAwBN,Y,MC7BL,SAASC,EAAa5F,GAEjC,IAKM6F,EAAW7F,EAAMyC,KAAKqD,QAAO,SAACC,EAAY3B,GAAb,OAAuB2B,EAAa3B,EAAMjD,QAAO,GAEpF,OACI,yBAAKlB,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,4CAXG,CACX,UAAa,WACb,QAAW,UASsBD,EAAMK,cAEnC,yBAAKJ,UAAU,cACX,uBAAGA,UAAU,gBAAgB4F,EAA7B,YAEJ,yBAAK5F,UAAU,iBACX,4BAAQmC,KAAK,SAASlC,QAAS,kBAAMF,EAAMgG,gBAAe,SAAC5E,GAAD,OAAWA,OAArE,YCpBD,SAAS6E,EAAQjG,GAE5B,IAAMiD,EAAqBC,iBAAO,IAQlC,OANKlD,EAAMmD,SAGPF,EAAmBG,QAAU,QAF7BH,EAAmBG,QAAU,iBAM7B,yBAAKnD,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAWgD,EAAmBG,SAC/B,2BAAIpD,EAAMkG,OAEd,yBAAKjG,UAAU,UACf,yBAAKA,UAAU,Y,MChBZ,SAASkG,EAAkBnG,GAEtC,IAeM+B,EAAgBmB,iBAAO,IACvBiB,EAAoBjB,iBAAO,IAG3BI,EAAaC,MAAMC,KAAK,CAACC,OAAQC,KAAY,SAACC,EAAGC,GAAJ,OAAUA,EADjD,QApBiC,EAuBX9C,mBAAS,CAACmD,UAAW,KAAMH,QAAS,OAvBzB,mBAuBtC/C,EAvBsC,KAuB3BC,EAvB2B,KA8DvCC,EAAe,SAAC,GAAgB,IArCZmD,EAAOC,EAqCTnD,EAAa,EAAbA,OACZP,EAAsBO,EAAtBP,KAAMQ,EAAgBD,EAAhBC,MAEd,OAF8BD,EAATkB,MAGjB,IAAK,aACDgE,QAAQC,IAAI1F,GACZyF,QAAQC,IAAIlF,GACZgD,EAAkBf,QAjBR,SAACzC,EAAMQ,GACzB,MAAa,cAATR,GAAwBQ,EAAQJ,EAAU+C,SAE1B,YAATnD,GAAsBQ,EAAQJ,EAAUkD,UADxC,mBAIA,GAWyBK,CAAc3D,EAAMQ,GAChDH,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,kBAERT,EAAOQ,OAEZ,MACJ,IAAK,WACD,IAAMoD,GAnDQH,EAmDyBrC,EAAcqB,QAnDhCiB,EAmDyC1C,SAAShB,GAlD3EyD,EAAMI,SAASH,GACfD,EAAQA,EAAMK,QAAO,SAAAjC,GAAI,OAAIA,IAAS6B,KAEtCD,EAAMM,KAAKL,GAERD,GA8CCpD,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,IAETS,MAAO0C,OAEX,MACJ,QACIvD,GAAa,SAACI,GAAD,mBAAC,eACPA,GADM,kBAERT,EAAOQ,SAKlBE,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sDACjBD,EAAME,iBACA8E,EAAgB/C,MAAMC,KAAK,CAACC,OAAQ1C,EAAU+C,QAAQ/C,EAAUkD,UAAU,IAAI,SAACN,EAAGC,GAAJ,OAAUA,EAAE7C,EAAUkD,aACpGxC,EAAU,CACZd,KAAMI,EAAUW,WAChBP,MAAOQ,SAASZ,EAAUa,YAC1BC,MAAOE,EAAcqB,QACrBpB,KAAMsE,GAEVtG,EAAMkC,UAAUT,EAASzB,EAAMK,YAC/BW,EAAa,CAACU,WAAW,GAAIE,WAAW,KACxCG,EAAcqB,QAAU,GACxBpD,EAAMG,iBAAiBH,EAAMI,cAZZ,2CAAH,sDAelB,OACI,0BAAM+B,SAAUd,GACR,yBAAKpB,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRzB,KAAK,aACLQ,MAAOJ,EAAUW,WACjBW,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,cACX,2BAAOmC,KAAK,SACRzB,KAAK,aACLQ,MAAOJ,EAAUa,WACjBS,YAAY,cACZC,SAAUrB,KAElB,yBAAKhB,UAAU,6BACX,4BAAQmC,KAAK,SAASuC,SAAUR,EAAkBf,SAAlD,UACA,4BAAQhB,KAAK,SAASlC,QAAS,kBAAMF,EAAMG,iBAAiBH,EAAMI,gBAAlE,YAGR,yBAAKH,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,UAhIZ,CACf,CAACU,KAAM,UAAWiE,MAAO,GACzB,CAACjE,KAAM,WAAYiE,MAAO,GAC1B,CAACjE,KAAM,QAASiE,MAAO,GACvB,CAACjE,KAAM,QAASiE,MAAO,GACvB,CAACjE,KAAM,MAAOiE,MAAO,GACrB,CAACjE,KAAM,OAAQiE,MAAO,GACtB,CAACjE,KAAM,OAAQiE,MAAO,GACtB,CAACjE,KAAM,SAAUiE,MAAO,GACxB,CAACjE,KAAM,YAAaiE,MAAO,GAC3B,CAACjE,KAAM,UAAWiE,MAAO,IACzB,CAACjE,KAAM,WAAYiE,MAAO,IAC1B,CAACjE,KAAM,WAAYiE,MAAO,KAqHEC,KAAI,SAAArC,GAAI,OAjGhBX,EAiGmCW,EA/FnD,2BAAOsC,IAAKjD,EAAM+C,OACd,2BACIxC,KAAK,WACLzB,KAAMkB,EAAM+C,MACZtC,SAAUrB,EACV8D,QAAShD,EAAcqB,QAAQoB,SAAS3C,EAAM+C,SAEjD/C,EAAMlB,MATI,IAACkB,OAoGZ,yBAAK5B,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,WACX,2BAAO+E,QAAQ,aAAf,kBACA,4BAAQtC,GAAG,YAAY/B,KAAK,YAAY2B,SAAUrB,GAC7CqC,EAAWuB,KAAI,SAAA7C,GAAI,OAAI,4BAAQb,MAAOa,EAAM8C,IAAK9C,GAAOA,OAE7D,2BAAOgD,QAAQ,WAAf,aACA,4BAAQtC,GAAG,UAAU/B,KAAK,UAAU2B,SAAUrB,GACzCqC,EAAWuB,KAAI,SAAA7C,GAAI,OAAI,4BAAQb,MAAOa,EAAM8C,IAAK9C,GAAOA,OAE5DmC,EAAkBf,SAAW,4E,MC3I3C,SAASmD,EAAavG,GAEjC,IAAMwG,EAAS,CACX,UAAa,mBACb,QAAW,kBAGTC,EAAa,UAAMD,EAAOxG,EAAMK,YAAnB,eACbqG,EAAe,UAAMF,EAAOxG,EAAMK,YAAnB,mBARmB,EAUFS,oBAAS,GAVP,mBAUjC6F,EAViC,KAUpBX,EAVoB,OAYAlF,oBAAS,GAZT,mBAYjCV,EAZiC,KAYnBD,EAZmB,KAcxC,OACI,6BACKH,EAAM4G,UAAY,kBAAC,EAAD,CACfnE,KAAMzC,EAAMyC,KAAKoE,OACjBxG,WAAYL,EAAMK,WAClB2F,eAAgBA,IAEnBW,GAAe,kBAACV,EAAD,CACJC,KAAMO,EACNtD,UAAU,IACrBwD,GAAe3G,EAAMyC,KAAKoE,OAAOhC,KAAI,SAAArC,GAAI,OAAI,kBAAC,EAAD,CAClCA,KAAMA,EACNnC,WAAYL,EAAMK,WAClByE,IAAKtC,EAAKG,IAAL,KACLK,aAAchD,EAAMgD,aACpBJ,WAAY5C,EAAM4C,WAClBwC,aAAa,EACbjC,UAAU,OAErBwD,GAAe3G,EAAM8G,aAAa9G,EAAMyC,KAAKoE,SAAW,kBAAC,EAAD,MACxDF,GAAe,kBAACV,EAAD,CACJC,KAAMQ,EACNvD,UAAU,IAErBwD,GAAe3G,EAAMyC,KAAKsE,SAASlC,KAAI,SAAArC,GAAI,OAAI,kBAAC,EAAD,CACpCA,KAAMA,EACNnC,WAAYL,EAAMK,WAClByE,IAAKtC,EAAKG,IAAL,KACLK,aAAchD,EAAMgD,aACpBJ,WAAY5C,EAAM4C,WAClBO,UAAU,EACViC,aAAa,OAExBuB,GAAe3G,EAAM8G,aAAa9G,EAAMyC,KAAKsE,WAAa,kBAAC,EAAD,MAC1DJ,IAAgBvG,GAAgB,kBAAC,EAAD,CACbC,WAAYL,EAAMK,WAClBF,gBAAiBA,EACjBC,aAAcA,IAEjCuG,GAAevG,GAAgB,kBAAC,EAAD,CACZD,gBAAiBA,EACjBC,aAAcA,EACd8B,UAAWlC,EAAMkC,UACjBJ,KAAM9B,EAAM8B,KACZzB,WAAYL,EAAMK,cChEnC,SAAS2G,EAAsBhH,GAAQ,IAAD,EAEjBc,oBAAS,GAFQ,mBAE1C8F,EAF0C,KAEhCK,EAFgC,OAGfnG,mBAAS,IAHM,mBAG1CoG,EAH0C,KAG/BC,EAH+B,KAajD1B,qBAAU,WACN,IAAM2B,EARgB,SAAC3E,GACvB,IAAMhB,EAAU,GAGhB,OAFAA,EAAQoF,OAASpE,EAAKgC,QAAO,SAAAjC,GAAI,OAAIA,EAAKX,MAAM2C,SAASxE,EAAM8B,KAAKC,cAAgB,IAAMS,EAAKR,KAAKwC,SAASxE,EAAM8B,KAAKG,iBACxHR,EAAQsF,SAAWtE,EAAKgC,QAAO,SAAAjC,GAAI,OAAKf,EAAQoF,OAAOrC,SAAShC,MACzDf,EAIkB4F,CAAkBrH,EAAMyC,MACjD0E,EAAaC,GACRR,GACDK,GAAY,KAGjB,CAACjH,EAAMyC,OAUV,OACI,6BACKmE,GAAY,kBAAC,EAAD,CACTvG,WAAYL,EAAMK,WAClBoC,KAAMyE,EACNN,SAAUA,EACVhE,WAAY5C,EAAM4C,WAClBI,aAAchD,EAAMgD,aACpB8D,aAhBS,SAAC1C,GAClB,OAAqB,IAAjBA,EAAMX,QAgBF3B,KAAM9B,EAAMyC,KAAKX,KACjBI,UAAWlC,EAAMkC,aCzClB,SAASoF,EAAWtH,GAC/B,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,wCAEJ,yBAAKA,UAAU,cACX,uBAAGA,UAAU,gBAAgBD,EAAMyC,KAAK8E,aAAevH,EAAMyC,KAAK+E,YAAcxH,EAAMyC,KAAKgF,eAAiBzH,EAAMyC,KAAKiF,cAAvH,YAEJ,yBAAKzH,UAAU,Y,ICLN0H,E,uKAKb,OAEI,yBAAK1H,UAAU,OACV,kBAAC,EAAD,CACG6B,KAAMvB,KAAKP,MAAMyC,KAAKX,KACtB6D,YAAapF,KAAKP,MAAM2F,YACxBD,yBAA0BnF,KAAKP,MAAM0F,2BAEzC,yBAAKzF,UAAU,eACTM,KAAKP,MAAMyC,KAAKmF,SAAY,kBAACN,EAAD,CAC1B7E,KAAQlC,KAAKP,MAAMyC,QAG3B,yBAAKxC,UAAU,eACTM,KAAKP,MAAMyC,KAAKmF,SAAW,kBAAC,EAAD,CACrBvH,WAAY,WACZoC,KAAMlC,KAAKP,MAAMyC,KAAKoF,SACtBrH,MAAOD,KAAKP,MAAMyC,KAAKiF,cACvBxF,UAAW3B,KAAKP,MAAMkC,UACtB4F,WAAYvH,KAAKP,MAAM8H,WACvB9E,aAAczC,KAAKP,MAAMgD,aACzBJ,WAAYrC,KAAKP,MAAM4C,WACvBd,KAAMvB,KAAKP,MAAMyC,KAAKX,QAE5BvB,KAAKP,MAAMyC,KAAKmF,SAAW,kBAAC,EAAD,CACrBvH,WAAY,SACZoC,KAAMlC,KAAKP,MAAMyC,KAAKsF,OACtBvH,MAAOD,KAAKP,MAAMyC,KAAK+E,YACvBtF,UAAW3B,KAAKP,MAAMkC,UACtB4F,WAAYvH,KAAKP,MAAM8H,WACvB9E,aAAczC,KAAKP,MAAMgD,aACzBJ,WAAYrC,KAAKP,MAAM4C,WACvBd,KAAMvB,KAAKP,MAAMyC,KAAKX,QAElC,yBAAK7B,UAAU,eACTM,KAAKP,MAAMyC,KAAKmF,SAAW,kBAACZ,EAAD,CACrB3G,WAAY,YACZoC,KAAMlC,KAAKP,MAAMyC,KAAKuF,UACtBpF,WAAYrC,KAAKP,MAAM4C,WACvBI,aAAczC,KAAKP,MAAMgD,aACzBd,UAAW3B,KAAKP,MAAMkC,UACtBJ,KAAMvB,KAAKP,MAAMyC,KAAKX,QAE5BvB,KAAKP,MAAMyC,KAAKmF,SAAW,kBAACZ,EAAD,CACrB3G,WAAY,UACZoC,KAAMlC,KAAKP,MAAMyC,KAAKwF,QACtBrF,WAAYrC,KAAKP,MAAM4C,WACvBI,aAAczC,KAAKP,MAAMgD,aACzBd,UAAW3B,KAAKP,MAAMkC,UACtBJ,KAAMvB,KAAKP,MAAMyC,KAAKX,a,GAtDjBrB,aCJZyH,E,kDAEjB,WAAYlI,GAAQ,IAAD,8BACf,cAAMA,IACDmI,MAAQ,CAAGP,SAAS,EACT9F,KAAM,CAAEsG,cAAc,IAAIC,MAAOC,WACzBC,aAAa,IAAIF,MAAOG,cACxBzG,eAAe,IAAIsG,MAAOC,WAC1BrG,cAAc,IAAIoG,MAAOG,gBAIjD,EAAKV,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKvG,UAAY,EAAKA,UAAUuG,KAAf,gBACjB,EAAKzF,aAAe,EAAKA,aAAayF,KAAlB,gBACpB,EAAK7F,WAAa,EAAKA,WAAW6F,KAAhB,gBAClB,EAAK9C,YAAc,EAAKA,YAAY8C,KAAjB,gBACnB,EAAK/C,yBAA2B,EAAKA,yBAAyB+C,KAA9B,gBAfjB,E,uDAkBRpI,EAAYwB,EAAOG,GAAO,IAAD,OAChC0G,MAAM,UAAD,OAAWrI,GAAa,CACzBsI,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB/G,MAAOA,EAAQ,EACfG,KAAMA,EACN3B,WAAYA,KAGnBwI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,aAAY,mBAAKzI,EAAayI,EAASrG,MAA3B,cACIpC,EAAW,QAAUyI,EAAStI,MAAM,GAAGA,OAD3C,KAEzBqI,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAASF,MAChC1C,QAAQC,IAAR,sCAA2ChG,M,+CAGtBwB,EAAOG,GAE5B,IADA,IAAMiH,EAAc,CAAC,SAAU,WAAY,YAAa,WAChDrF,EAAE,EAAGA,EAAEqF,EAAYxF,OAAQG,IAC/BrD,KAAKuH,WAAWmB,EAAYrF,GAAI/B,EAAOG,K,gCAIrCP,EAASpB,GAAa,IAAD,OAC3BqI,MAAM,QAAD,OAASrI,GAAc,CACxBsI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBM,KAAMC,KAAKC,UAAU3H,KAExBoH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,aAAY,mBAAKzI,EAAayI,EAASrG,MAA3B,cACIpC,EAAW,QAAUyI,EAAStI,MAAM,GAAGA,OAD3C,KAEzBqI,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAASF,Q,mCAItBhE,EAAKzE,GAAa,IAAD,OAEvBwB,EAAQtB,KAAK4H,MAAMrG,KAAKC,cAAgB,EACxCC,EAAOzB,KAAK4H,MAAMrG,KAAKG,aAE3ByG,MAAM,WAAD,OAAYrI,GAAc,CAC3BsI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBM,KAAMC,KAAKC,UAAU,CACjB,GAAMtE,EACN,MAASjD,EACT,KAAQG,MAGf6G,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,aAAY,mBAAKzI,EAAayI,EAASrG,MAA3B,cACrBpC,EAAW,QAAUyI,EAAStI,MAAM,GAAGA,OADlB,KAEzBqI,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAASF,Q,iCAGxBO,EAAahJ,GAAa,IAAD,OAEjCgJ,EAAYtH,cAAgBxB,KAAK4H,MAAMrG,KAAKC,cAAgB,EAC5DsH,EAAYpH,aAAe1B,KAAK4H,MAAMrG,KAAKG,aAE3CyG,MAAM,WAAD,OAAYrI,GAAc,CAC3BsI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBM,KAAMC,KAAKC,UAAUC,KAExBR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,aAAY,mBAAKzI,EAAayI,EAASrG,MAA3B,cACrBpC,EAAW,QAAUyI,EAAStI,MAAM,GAAGA,OADlB,KAEzBqI,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAASF,Q,kCAGvBQ,GAET,IAAIC,EAAWhJ,KAAK4H,MAAMrG,KAAKC,cAC3ByH,EAAUjJ,KAAK4H,MAAMrG,KAAKG,aAEQ,KAAlC1B,KAAK4H,MAAMrG,KAAKC,eAAwBuH,EAAY,GACpDC,EAAW,EACXC,GAAoB,GACqB,IAAlCjJ,KAAK4H,MAAMrG,KAAKC,eAAuBuH,EAAY,GAC1DC,EAAW,GACXC,GAAoB,GAEpBD,GAAsBD,EAG1B/I,KAAKyI,SAAS,CAAClH,KAAK,2BACbvB,KAAK4H,MAAMrG,MADC,IAEfC,cAAewH,EACftH,aAAcuH,Q,8JAMd/G,EAAO,GAELwG,EAAc,CAAC,SAAU,WAAY,YAAa,WAChDrF,EAAE,E,YAAGA,EAAEqF,EAAYxF,Q,iCACMiF,MAAM,UAAD,OAAWO,EAAYrF,IAAK,CAC1D+E,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB/G,MAAOtB,KAAK4H,MAAMrG,KAAKsG,aAAe,EACtCpG,KAAMzB,KAAK4H,MAAMrG,KAAKyG,YACtBlI,WAAY4I,EAAYrF,MAG/BiF,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,OADerG,EAAKwG,EAAYrF,GAAG,SAAWkF,EAAStI,MAAM,GAAGA,MACzDsI,EAASrG,Q,OAXpBA,EAAKwG,EAAYrF,I,cADcA,I,uBAenCnB,EAAKmF,SAAU,EACfrH,KAAKyI,SAASvG,G,sIAKd,OAAO,kBAAC,EAAD,CAAKA,KAAMlC,KAAK4H,MACnBjG,UAAW3B,KAAK2B,UAChB4F,WAAYvH,KAAKuH,WACjB9E,aAAczC,KAAKyC,aACnBJ,WAAYrC,KAAKqC,WACjB+C,YAAapF,KAAKoF,YAClBD,yBAA0BnF,KAAKmF,+B,GAzJD+D,IAAMhJ,WCS5BiJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.26d91fe7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AddRow.css'\r\n\r\nexport default function AddRow(props) {\r\n  \r\n  const titles = {\r\n    'expenses': 'expenses',\r\n    'income': 'income',\r\n    'mExpenses': 'per month expenses',\r\n    'mIncome': 'per month income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n        <div className=\"leftBorder\"></div>\r\n        <div className=\"title bold\">\r\n            <p onClick={() => props.setShowInputRow(!props.showInputRow)} className=\"pointerOnHover\"><i className=\"fas fa-plus-circle\"></i> Add {titles[props.typeOfData]}</p>\r\n        </div>\r\n        <div className=\"value\"></div>\r\n        <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SumRow extends Component {\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"title bold\">\r\n                  <p>Sum:</p>\r\n                </div>\r\n                <div className=\"value bold\">\r\n                  <p className='numbersAlign'>{this.props.total} €</p>\r\n                </div>\r\n                <div className=\"button\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TitleRow(props) {\r\n  \r\n  const titles = {\r\n    'expenses': 'Expenses',\r\n    'income': 'Income',\r\n    'mExpenses': 'Per Month Expenses',\r\n    'mIncome': 'Per Month Income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"leftBorder\"></div>\r\n      <div className=\"title bold\">\r\n        <p>{titles[props.name].toUpperCase()}</p>\r\n      </div>\r\n      <div className=\"value\"></div>\r\n      <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport './InputRow.css'\r\n\r\nexport default function InputRow(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({})\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        setUserInput((prev) => ({\r\n            ...prev,\r\n            [name]: value\r\n          }));\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        const newData = {\r\n            name: userInput.inputTitle,\r\n            value: parseInt(userInput.inputValue),\r\n            month: props.date.selectedMonth +1,\r\n            year: props.date.selectedYear\r\n        }\r\n        props.writeToDB(newData, props.typeOfData);\r\n        setUserInput({inputTitle:'', inputValue:''})\r\n    }\r\n\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"inputTitle\"\r\n                            value={userInput.inputTitle}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"inputValue\"\r\n                            value={userInput.inputValue}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons inputButtons\">\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                        <button type=\"button\" onClick={() => props.setShowInputRow(!props.showInputRow)}>&#xf05e;</button>\r\n                    </div>\r\n                </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport './EditItem.css';\r\n\r\nexport default function EditItem(props) {\r\n    \r\n    const [userInput, setUserInput] = useState({\r\n                                        name: props.item.name, \r\n                                        value: props.item.value,\r\n                                    })\r\n\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        \r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }   \r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // preventDefault disables the default requests on submit.\r\n        let data = userInput;\r\n        data.id = props.item._id['$oid'];\r\n        data.month = props.date.selectedMonth +1;\r\n        data.year = props.date.selectedYear;\r\n        props.updateInDB(data, \r\n            props.typeOfData);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // preventDefault disables the default requests on submit.\r\n        props.setEditMode()\r\n    }\r\n \r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"name\"\r\n                            value={userInput.name}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"value\"\r\n                            value={userInput.value}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons\">\r\n                        <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n        }\r\n","import React, {useRef} from 'react'\r\nimport './ShowItem.css';\r\n\r\nexport default function ShowItem(props) {\r\n    \r\n    const handleClickDelete = async () => {\r\n        props.deleteFromDB(props.item._id['$oid'], props.typeOfData);\r\n    }\r\n\r\n    const checkInactiveClass = useRef('')\r\n\r\n    if (!props.isActive) {\r\n        checkInactiveClass.current = \"row item inactive\"\r\n    } else {\r\n        checkInactiveClass.current = \"row item\"\r\n    }\r\n\r\n    return (\r\n        <div className={checkInactiveClass.current} >\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title paddingleft\">\r\n                <p>{props.item.name}</p>\r\n            </div>\r\n            <div className=\"value\">\r\n                <p className=\"numbersAlign\">{props.item.value} €</p>\r\n            </div>\r\n            <div className=\"button trash\">\r\n                <button type=\"button\" onClick={props.setEditMode}>&#xf044;</button>\r\n                <button type=\"button\" onClick={handleClickDelete}>&#xf2ed;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react'\r\nimport './EditRecurrentItem.css';\r\n\r\nexport default function EditRecurrentItem(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({\r\n                                        name: props.item.name, \r\n                                        value: props.item.value,\r\n                                        month: props.item.month,\r\n                                        year: props.item.year\r\n                                    })\r\n\r\n    const monthArray = [\r\n        {name: 'January', label: 1},\r\n        {name: 'February', label: 2},\r\n        {name: 'March', label: 3},\r\n        {name: 'April', label: 4},\r\n        {name: 'May', label: 5},\r\n        {name: 'June', label: 6},\r\n        {name: 'July', label: 7},\r\n        {name: 'August', label: 8},\r\n        {name: 'September', label: 9},\r\n        {name: 'Oktober', label: 10},\r\n        {name: 'November', label: 11},\r\n        {name: 'December', label: 12}\r\n    ];\r\n\r\n    const START=2020, END=2036;\r\n    const yearsArray = Array.from({length: END-START}, (x, i) => i+START)\r\n\r\n    const selectedYears = useRef({\r\n        endYear: Math.max(...userInput.year),\r\n        startYear: Math.min(...userInput.year)\r\n    })                     \r\n\r\n    const validationWarning = useRef(\"\")\r\n\r\n    \r\n\r\n    const validateYears = (name, value) => {\r\n        if (name === 'startYear' && value > selectedYears.current.endYear){\r\n            return 'validationFailed'\r\n        } else if (name === 'endYear' && value < selectedYears.current.startYear){\r\n            return 'validationFailed'\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const changeMonthArray = (array, newValue) => {\r\n        if (array.includes(newValue)){\r\n            array = array.filter(item => item !== newValue)\r\n        } else {\r\n            array.push(newValue)\r\n        }\r\n        return array\r\n    }\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value, type } = target;\r\n        \r\n        switch (type) {\r\n            case \"select-one\":\r\n                validationWarning.current = validateYears(name, value);\r\n                selectedYears.current[name] = parseInt(value);\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    year: Array.from({length: selectedYears.current.endYear-selectedYears.current.startYear+1}, (x, i) => i+selectedYears.current.startYear)\r\n                  }));  \r\n                break;\r\n            case \"checkbox\":\r\n                const newMonthArray = changeMonthArray(userInput.month, parseInt(name))\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    month: newMonthArray\r\n                }));\r\n                break;\r\n            default:\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        let data = userInput;\r\n        data.id = props.item._id['$oid']\r\n        props.updateInDB(data, \r\n            props.typeOfData);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        props.setEditMode()\r\n    }\r\n\r\n    const createCheckBox = (month) => {\r\n        return (\r\n            <label key={month.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name={month.label}\r\n                    checked={userInput.month.includes(month.label)}\r\n                    onChange={handleChange}\r\n                />\r\n                {month.name}\r\n            </label>\r\n        )\r\n    }\r\n \r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"name\"\r\n                            value={userInput.name}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"value\"\r\n                            value={userInput.value}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons\">\r\n                        <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                        <button type=\"submit\" disabled={validationWarning.current}>&#xf00c;</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"labels\">\r\n                        {monthArray.map(item => createCheckBox(item))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower\">\r\n                    <div className=\"leftBorder\"></div>\r\n                        <div className=\"selects\">\r\n                            <label htmlFor=\"startYear\">Starting year:</label>\r\n                            <select id=\"startYear\" name=\"startYear\" defaultValue={selectedYears.current.startYear} onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            <label htmlFor=\"endYear\">End year:</label>\r\n                            <select id=\"endYear\" name=\"endYear\" defaultValue={selectedYears.current.endYear} onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            {validationWarning.current && <warning>End year can't be before start year.</warning>}\r\n                        </div>\r\n                    </div>\r\n            </form>\r\n        )\r\n  \r\n\r\n}","import React, { useState } from 'react'\r\nimport './ItemRow.css';\r\nimport EditItem from './EditItem/EditItem'\r\nimport ShowItem from './ShowItem/ShowItem'\r\nimport EditRecurrentItem from './EditRecurrentItem/EditRecurrentItem'\r\n\r\nexport default function ItemRow(props) {\r\n    \r\n    const [editMode, setEditMode] = useState(false);\r\n    \r\n    if (editMode && !props.isMonthData) {\r\n        return (\r\n            <EditItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}\r\n                isMonthData={props.isMonthData}\r\n                />\r\n        )\r\n    } else if (editMode && props.isMonthData) {\r\n        return (\r\n            <EditRecurrentItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}\r\n                isMonthData={props.isMonthData}\r\n                />\r\n        )   \r\n    } else {\r\n        return (\r\n            <ShowItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                deleteFromDB={props.deleteFromDB}\r\n                date={props.date}\r\n                isActive={props.isActive}\r\n                />\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport './NoData.css'\r\n\r\n\r\nexport default function NoData(props) {\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"row item\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"title\">\r\n                    <p className=\"noData\">No Data available<br/>¯\\_(ツ)_/¯</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddRow from '../AddRow/AddRow'\r\nimport SumRow from '../SumRow/SumRow'\r\nimport TitleRow from '../TitleRow/TitleRow'\r\nimport './AllRowsOfType.css'\r\nimport InputRow from '../InputRow/InputRow'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport NoData from '../NoData/NoData'\r\n\r\nexport default function AllRowsOfType(props) {\r\n\r\n    const [showInputRow, setShowInputRow] = useState(false)\r\n\r\n    if (props.data.length === 0){\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <TitleRow name={props.typeOfData} />\r\n                    <NoData \r\n                        typeOfData={props.typeOfData}\r\n                        writeToDB={props.writeToDB}\r\n                        date={props.date}\r\n                        />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n                <div>\r\n                    <TitleRow name={props.typeOfData} />\r\n                    {props.data.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        date={props.date}\r\n                        key={item._id['$oid']}\r\n                        isActive={true} \r\n                        />)}\r\n                    <SumRow total={props.total} />\r\n                    {!showInputRow && < AddRow\r\n                        setShowInputRow={setShowInputRow}\r\n                        showInputRow={showInputRow}\r\n                        typeOfData={props.typeOfData}\r\n                        />}\r\n                    {showInputRow && <InputRow\r\n                        setShowInputRow={setShowInputRow}\r\n                        showInputRow={showInputRow}\r\n                        writeToDB={props.writeToDB}\r\n                        date={props.date}\r\n                        typeOfData={props.typeOfData}\r\n                        />}\r\n                </div>\r\n                )\r\n    }\r\n\r\n    \r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport './MonthChanger.css';\r\n\r\nexport default function MonthChanger(props) {\r\n    \r\n    const month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\n    const handleClickNext = () => {\r\n        props.changeMonth(1);\r\n    }\r\n\r\n    const handleClickBack = () => {\r\n        props.changeMonth(-1);\r\n    }\r\n\r\n    const didMountRef = useRef(false) // preventing useEffect to run on the fist page load\r\n\r\n    useEffect(() => {\r\n        if (didMountRef.current){\r\n            props.readAllCollectionsFromDB(props.date.selectedMonth, props.date.selectedYear)\r\n        } else didMountRef.current = true\r\n    }, [props.date.selectedMonth])\r\n\r\n    return (\r\n        <div className=\"monthChanger\">\r\n                <div className=\"prevMonth\">\r\n                    <button type=\"button\" onClick={handleClickBack}>&#xf04a;</button>\r\n                </div>\r\n                <div className=\"currentMonth\">\r\n                    {month[props.date.selectedMonth]}, {props.date.selectedYear}\r\n                </div>\r\n                <div className=\"nextMonth\">\r\n                    <button type=\"button\" onClick={handleClickNext}>&#xf04e;</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './SumMonthData.css';\r\n\r\nexport default function SumMonthData(props) {\r\n\r\n    const titles = {\r\n        'mExpenses': 'expenses',\r\n        'mIncome': 'income'\r\n      }\r\n\r\n    const valueSum = props.data.reduce((currentSum, array) => currentSum + array.value, 0);\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title bold\">\r\n                <p>Total monthly {titles[props.typeOfData]}</p>\r\n            </div>\r\n            <div className=\"value bold\">\r\n                <p className='numbersAlign'>{valueSum} €</p>\r\n            </div>\r\n            <div className=\"button expand\">\r\n                <button type=\"button\" onClick={() => props.setShowDetails((prev) => !prev)}>&#xf150;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef} from 'react'\r\n\r\nexport default function TextRow(props) {\r\n  \r\n    const checkInactiveClass = useRef('')\r\n\r\n    if (!props.isActive) {\r\n        checkInactiveClass.current = \"title inactive\"\r\n    } else {\r\n        checkInactiveClass.current = \"title\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className={checkInactiveClass.current}>\r\n                <p>{props.text}</p>\r\n            </div>\r\n            <div className=\"value\"></div>\r\n            <div className=\"button\"></div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useRef } from 'react'\r\nimport './InputRowRecurrent.css'\r\n\r\nexport default function InputRowRecurrent(props) {\r\n    \r\n    const monthArray = [\r\n        {name: 'January', label: 1},\r\n        {name: 'February', label: 2},\r\n        {name: 'March', label: 3},\r\n        {name: 'April', label: 4},\r\n        {name: 'May', label: 5},\r\n        {name: 'June', label: 6},\r\n        {name: 'July', label: 7},\r\n        {name: 'August', label: 8},\r\n        {name: 'September', label: 9},\r\n        {name: 'Oktober', label: 10},\r\n        {name: 'November', label: 11},\r\n        {name: 'December', label: 12}\r\n    ];\r\n\r\n    const selectedMonth = useRef([])\r\n    const validationWarning = useRef(\"\")\r\n\r\n    const START=2020, END=2036;\r\n    const yearsArray = Array.from({length: END-START}, (x, i) => i+START)\r\n    \r\n    const [userInput, setUserInput] = useState({startYear: 2020, endYear: 2020})\r\n\r\n    const changeMonthArray = (array, newValue) => {\r\n        if (array.includes(newValue)){\r\n            array = array.filter(item => item !== newValue)\r\n        } else {\r\n            array.push(newValue)\r\n        }\r\n        return array\r\n    }\r\n\r\n    const createCheckBox = (month) => {\r\n        return (\r\n            <label key={month.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name={month.label}\r\n                    onChange={handleChange}\r\n                    checked={selectedMonth.current.includes(month.label)}\r\n                />\r\n                {month.name}\r\n            </label>\r\n        )\r\n    }\r\n\r\n    const displayValidationWarning = () => {\r\n        \r\n    }\r\n\r\n    const validateYears = (name, value) => {\r\n        if (name === 'startYear' && value > userInput.endYear){\r\n            return 'validationFailed'\r\n        } else if (name === 'endYear' && value < userInput.startYear){\r\n            return 'validationFailed'\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value, type } = target;\r\n        \r\n        switch (type) {\r\n            case \"select-one\":\r\n                console.log(name)\r\n                console.log(value)\r\n                validationWarning.current = validateYears(name, value)\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));              \r\n                break;\r\n            case \"checkbox\":\r\n                const newMonthArray = changeMonthArray(selectedMonth.current, parseInt(name))\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    month: newMonthArray\r\n                }));\r\n                break;\r\n            default:\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        const userYearArray = Array.from({length: userInput.endYear-userInput.startYear+1}, (x, i) => i+userInput.startYear);\r\n        const newData = {\r\n            name: userInput.inputTitle,\r\n            value: parseInt(userInput.inputValue),\r\n            month: selectedMonth.current,\r\n            year: userYearArray\r\n        }\r\n        props.writeToDB(newData, props.typeOfData);\r\n        setUserInput({inputTitle:'', inputValue:''});\r\n        selectedMonth.current = [];\r\n        props.setShowInputRow(!props.showInputRow);\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"inputTitle\"\r\n                            value={userInput.inputTitle}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"inputValue\"\r\n                            value={userInput.inputValue}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons inputButtons\">\r\n                        <button type=\"submit\" disabled={validationWarning.current}>&#xf00c;</button>\r\n                        <button type=\"button\" onClick={() => props.setShowInputRow(!props.showInputRow)}>&#xf05e;</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"labels\">\r\n                        {monthArray.map(item => createCheckBox(item))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower\">\r\n                    <div className=\"leftBorder\"></div>\r\n                        <div className=\"selects\">\r\n                            <label htmlFor=\"startYear\">Starting year:</label>\r\n                            <select id=\"startYear\" name=\"startYear\" onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            <label htmlFor=\"endYear\">End year:</label>\r\n                            <select id=\"endYear\" name=\"endYear\" onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            {validationWarning.current && <warning>End year can't be before start year.</warning>}\r\n                        </div>\r\n                    </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport SumMonthData from '../SumMonthData/SumMonthData'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport TextRow from '../TextRow/TextRow'\r\nimport NoData from '../NoData/NoData'\r\nimport InputRowRecurrent from '../InputRowRecurrent/InputRowRecurrent'\r\nimport AddRow from '../AddRow/AddRow'\r\nimport './MDataSummary.css';\r\n\r\nexport default function MDataSummary(props) {\r\n\r\n    const titles = {\r\n        'mExpenses': 'Monthly expenses',\r\n        'mIncome': 'Monthly income'\r\n      }\r\n\r\n    const textForActive = `${titles[props.typeOfData]} this month`\r\n    const textForInactive = `${titles[props.typeOfData]} in other month`\r\n\r\n    const [showDetails, setShowDetails] = useState(false)\r\n\r\n    const [showInputRow, setShowInputRow] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            {props.didSplit && <SumMonthData \r\n                data={props.data.active} \r\n                typeOfData={props.typeOfData}\r\n                setShowDetails={setShowDetails}\r\n                />}\r\n            {showDetails && <TextRow \r\n                        text={textForActive}\r\n                        isActive={true}/>}\r\n            {showDetails && props.data.active.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        key={item._id['$oid']}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        isMonthData={true}\r\n                        isActive={true}\r\n                        />)}\r\n            {showDetails && props.arrayIsEmpty(props.data.active) && <NoData />}\r\n            {showDetails && <TextRow \r\n                        text={textForInactive}\r\n                        isActive={false}\r\n                        />}\r\n            {showDetails && props.data.inactive.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        key={item._id['$oid']}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        isActive={false}\r\n                        isMonthData={true}\r\n                        />)}\r\n            {showDetails && props.arrayIsEmpty(props.data.inactive) && <NoData />}\r\n            {showDetails && !showInputRow && <AddRow \r\n                                typeOfData={props.typeOfData}\r\n                                setShowInputRow={setShowInputRow}\r\n                                showInputRow={showInputRow}\r\n                                />}\r\n            {showDetails && showInputRow && <InputRowRecurrent \r\n                                setShowInputRow={setShowInputRow}\r\n                                showInputRow={showInputRow}\r\n                                writeToDB={props.writeToDB}\r\n                                date={props.date}\r\n                                typeOfData={props.typeOfData}\r\n                                />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport MDataSummary from '../components/MDataSummary/MDataSummary'\r\n\r\nexport default function MDataSummaryContainer(props) {\r\n    \r\n    const [didSplit, setdidSplit] = useState(false)\r\n    const [splitData, setSplitData] = useState([])\r\n\r\n\r\n    const splitDataFunction = (data) => {\r\n        const newData = {}\r\n        newData.active = data.filter(item => item.month.includes(props.date.selectedMonth + 1) && item.year.includes(props.date.selectedYear));\r\n        newData.inactive = data.filter(item => !newData.active.includes(item));\r\n        return newData\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const slitDataForState = splitDataFunction(props.data)\r\n        setSplitData(slitDataForState);\r\n        if (!didSplit){\r\n            setdidSplit(true);\r\n        }\r\n        \r\n    }, [props.data])\r\n    \r\n    const arrayIsEmpty = (array) => {\r\n        if (array.length === 0){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {didSplit && <MDataSummary\r\n                typeOfData={props.typeOfData}\r\n                data={splitData}\r\n                didSplit={didSplit}\r\n                updateInDB={props.updateInDB}\r\n                deleteFromDB={props.deleteFromDB}\r\n                arrayIsEmpty={arrayIsEmpty}\r\n                date={props.data.date}\r\n                writeToDB={props.writeToDB}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function BalanceRow(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title bold\">\r\n                <p>Balance:</p>\r\n            </div>\r\n            <div className=\"value bold\">\r\n                <p className='numbersAlign'>{props.data.mIncomeTotal + props.data.incomeTotal - props.data.mExpensesTotal - props.data.expensesTotal} €</p>\r\n            </div>\r\n            <div className=\"button\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport AllRowsOfType from '../AllRowsOfType/AllRowsOfType'\r\nimport MonthChanger from '../MonthChanger/MonthChanger'\r\nimport MDataSummaryContainer from '../../containers/MDataSummaryContainer'\r\nimport BalanceRow from '../BalanceRow/BalanceRow'\r\n\r\nexport default class App extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                 <MonthChanger \r\n                    date={this.props.data.date}\r\n                    changeMonth={this.props.changeMonth}\r\n                    readAllCollectionsFromDB={this.props.readAllCollectionsFromDB}\r\n                    />\r\n                <div className=\"monthTable\">\r\n                    {!this.props.data.loading &&  <BalanceRow\r\n                        data = {this.props.data}\r\n                        />}\r\n                </div>\r\n                <div className=\"monthTable\">\r\n                    {!this.props.data.loading && <AllRowsOfType\r\n                            typeOfData={\"expenses\"}\r\n                            data={this.props.data.expenses}\r\n                            total={this.props.data.expensesTotal}\r\n                            writeToDB={this.props.writeToDB}\r\n                            readFromDB={this.props.readFromDB}\r\n                            deleteFromDB={this.props.deleteFromDB}\r\n                            updateInDB={this.props.updateInDB}\r\n                            date={this.props.data.date}\r\n                            />}\r\n                    {!this.props.data.loading && <AllRowsOfType\r\n                            typeOfData={\"income\"}\r\n                            data={this.props.data.income}\r\n                            total={this.props.data.incomeTotal}\r\n                            writeToDB={this.props.writeToDB}\r\n                            readFromDB={this.props.readFromDB}\r\n                            deleteFromDB={this.props.deleteFromDB}\r\n                            updateInDB={this.props.updateInDB}\r\n                            date={this.props.data.date} />}\r\n                </div>\r\n                <div className=\"monthTable\">\r\n                    {!this.props.data.loading && <MDataSummaryContainer\r\n                            typeOfData={\"mExpenses\"}\r\n                            data={this.props.data.mExpenses}\r\n                            updateInDB={this.props.updateInDB}\r\n                            deleteFromDB={this.props.deleteFromDB}\r\n                            writeToDB={this.props.writeToDB}\r\n                            date={this.props.data.date}\r\n                            />}\r\n                    {!this.props.data.loading && <MDataSummaryContainer\r\n                            typeOfData={\"mIncome\"}\r\n                            data={this.props.data.mIncome}\r\n                            updateInDB={this.props.updateInDB}\r\n                            deleteFromDB={this.props.deleteFromDB}\r\n                            writeToDB={this.props.writeToDB}\r\n                            date={this.props.data.date}\r\n                            />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport App from '../components/App/App'\r\n\r\nexport default class AppContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  loading: true,\r\n                        date: { currentMonth: new Date().getMonth(),\r\n                                currentYear: new Date().getFullYear(),\r\n                                selectedMonth: new Date().getMonth(),\r\n                                selectedYear: new Date().getFullYear()\r\n                            }\r\n                    };\r\n\r\n        this.readFromDB = this.readFromDB.bind(this);\r\n        this.writeToDB = this.writeToDB.bind(this);\r\n        this.deleteFromDB = this.deleteFromDB.bind(this);\r\n        this.updateInDB = this.updateInDB.bind(this);\r\n        this.changeMonth = this.changeMonth.bind(this);\r\n        this.readAllCollectionsFromDB = this.readAllCollectionsFromDB.bind(this);\r\n    }\r\n\r\n    readFromDB(typeOfData, month, year) {\r\n        fetch(`/fetch/${typeOfData}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                month: month + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                year: year,\r\n                typeOfData: typeOfData \r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response.data,\r\n                                     [typeOfData+\"Total\"]: response.total[0].total })\r\n        .then(response => this.setState(response));\r\n        console.log(`readFromDB is done fetching ${typeOfData}`)\r\n    }\r\n\r\n    readAllCollectionsFromDB(month, year) {\r\n        const collections = ['income', 'expenses', 'mExpenses', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            this.readFromDB(collections[i], month, year)\r\n        } \r\n    }\r\n\r\n    writeToDB(newData, typeOfData) {\r\n        fetch(`/add/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response.data,\r\n                                     [typeOfData+\"Total\"]: response.total[0].total })\r\n        .then(response => this.setState(response));\r\n\r\n    }\r\n\r\n    deleteFromDB (key, typeOfData) {\r\n\r\n        var month = this.state.date.selectedMonth + 1; // + 1 because js getdate returns month as digits starting with 0\r\n        var year = this.state.date.selectedYear;        \r\n\r\n        fetch(`/delete/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": key,\r\n                \"month\": month,\r\n                \"year\": year\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response.data,\r\n            [typeOfData+\"Total\"]: response.total[0].total })\r\n        .then(response => this.setState(response));\r\n    }\r\n\r\n    updateInDB (updatedData, typeOfData) {\r\n        \r\n        updatedData.selectedMonth = this.state.date.selectedMonth + 1;\r\n        updatedData.selectedYear = this.state.date.selectedYear;\r\n\r\n        fetch(`/update/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updatedData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response.data,\r\n            [typeOfData+\"Total\"]: response.total[0].total })\r\n        .then(response => this.setState(response));\r\n    }\r\n\r\n    changeMonth (increment) {\r\n\r\n        var newMonth = this.state.date.selectedMonth;\r\n        var newYear = this.state.date.selectedYear;\r\n\r\n        if (this.state.date.selectedMonth === 11 && increment > 0) {\r\n            newMonth = 0;\r\n            newYear = newYear + 1;\r\n        } else if (this.state.date.selectedMonth === 0 && increment < 0) {\r\n            newMonth = 11;\r\n            newYear = newYear - 1;\r\n        } else {\r\n            newMonth = newMonth + increment;\r\n        }\r\n\r\n        this.setState({date: {\r\n            ...this.state.date,\r\n            selectedMonth: newMonth,\r\n            selectedYear: newYear\r\n        }})\r\n\r\n    }  \r\n\r\n    async componentDidMount() {\r\n        var data = {};\r\n\r\n        const collections = ['income', 'expenses', 'mExpenses', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            data[collections[i]] = await fetch(`/fetch/${collections[i]}`,{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    month: this.state.date.currentMonth + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                    year: this.state.date.currentYear,\r\n                    typeOfData: collections[i]\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {data[collections[i]+'Total'] = response.total[0].total\r\n                return response.data})\r\n        } \r\n\r\n        data.loading = false;\r\n        this.setState(data);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <App data={this.state}\r\n            writeToDB={this.writeToDB}\r\n            readFromDB={this.readFromDB}\r\n            deleteFromDB={this.deleteFromDB}\r\n            updateInDB={this.updateInDB} \r\n            changeMonth={this.changeMonth}\r\n            readAllCollectionsFromDB={this.readAllCollectionsFromDB}\r\n            />;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppContainer from '../src/containers/AppContainer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppContainer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}