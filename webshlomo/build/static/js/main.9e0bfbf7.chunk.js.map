{"version":3,"sources":["components/AddRow/AddRow.js","components/SumRow/SumRow.js","components/TitleRow/TitleRow.js","components/InputRow/InputRow.js","components/ItemRow/EditItem/EditItem.js","components/ItemRow/ShowItem/ShowItem.js","components/ItemRow/EditRecurrentItem/EditRecurrentItem.js","components/ItemRow/ItemRow.js","components/NoData/NoData.js","components/AllRowsOfType/AllRowsOfType.js","components/MonthChanger/MonthChanger.js","components/SumMonthData/SumMonthData.js","components/TextRow/TextRow.js","components/MDataSummary/MDataSummary.js","containers/MDataSummaryContainer.js","components/App/App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["AddRow","props","className","onClick","changeVisibility","typeOfData","SumRow","valueSum","this","data","reduce","currentSum","array","value","Component","TitleRow","name","toUpperCase","InputRow","useState","userInput","setUserInput","handleChange","target","prev","handleSubmit","event","a","preventDefault","writeToDB","inputTitle","parseInt","inputValue","date","selectedMonth","selectedYear","onSubmit","type","placeholder","onChange","EditItem","item","id","_id","updateInDB","setEditMode","ShowItem","handleClickDelete","deleteFromDB","checkInactiveClass","useRef","isActive","current","EditRecurrentItem","month","yearArray","yearsArray","Array","from","length","END","x","i","selectedYears","endYear","Math","max","startYear","min","newValue","newMonthArray","includes","filter","push","label","map","key","checked","htmlFor","defaultValue","year","ItemRow","editMode","isMonthData","NoData","addRowVisibility","setaddRowVisibility","inputRowVisibility","setInputRowVisibility","AllRowsOfType","state","showAddRow","showInputRow","bind","setState","MonthChanger","didMountRef","useEffect","readAllCollectionsFromDB","changeMonth","SumMonthData","setShowDetails","TextRow","text","MDataSummary","titles","textForActive","textForInactive","showDetails","didSplit","active","arrayIsEmpty","inactive","MDataSummaryContainer","setdidSplit","splitData","setSplitData","slitDataForState","newData","splitDataFunction","App","loading","expences","readFromDB","income","mExpenses","mIncome","AppContainer","currentMonth","Date","getMonth","currentYear","getFullYear","fetch","method","headers","then","response","json","console","log","collections","body","JSON","stringify","updatedData","increment","newMonth","newYear","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6gBAGe,SAASA,EAAOC,GAS7B,OACE,yBAAKC,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,uBAAGC,QAASF,EAAMG,iBAAkBF,UAAU,kBAAiB,uBAAGA,UAAU,uBAA5E,QAXK,CACb,SAAY,WACZ,OAAU,SACV,UAAa,qBACb,QAAW,oBAO+GD,EAAMI,cAE5H,yBAAKH,UAAU,UACf,yBAAKA,UAAU,Y,ICjBFI,E,uKAGb,IAAMC,EAAWC,KAAKP,MAAMQ,KAAKC,QAAO,SAACC,EAAYC,GAAb,OAAuBD,EAAaC,EAAMC,QAAO,GAEzF,OACI,yBAAKX,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACb,oCAEF,yBAAKA,UAAU,cACb,uBAAGA,UAAU,gBAAgBK,EAA7B,YAEF,yBAAKL,UAAU,gB,GAdKY,aCArB,SAASC,EAASd,GAS/B,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACb,2BAXS,CACb,SAAY,WACZ,OAAU,SACV,UAAa,qBACb,QAAW,oBAOID,EAAMe,MAAMC,gBAEzB,yBAAKf,UAAU,UACf,yBAAKA,UAAU,Y,uBCfN,SAASgB,EAASjB,GAAQ,IAAD,EAGFkB,mBAAS,IAHP,mBAG7BC,EAH6B,KAGlBC,EAHkB,KAK9BC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZP,EAAgBO,EAAhBP,KAAMH,EAAUU,EAAVV,MACdQ,GAAa,SAACG,GAAD,mBAAC,eACPA,GADM,kBAERR,EAAOH,QAIVY,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBD,EAAME,iBACN3B,EAAM4B,UAAU,CAACb,KAAMI,EAAUU,WAAYjB,MAAOkB,SAASX,EAAUY,aAAc/B,EAAMI,WAAYJ,EAAMgC,KAAKC,cAAejC,EAAMgC,KAAKE,cAC5Id,EAAa,CAACS,WAAW,GAAIE,WAAW,KAHvB,2CAAH,sDAMlB,OACI,0BAAMI,SAAUX,GACR,yBAAKvB,UAAU,eACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRrB,KAAK,aACLH,MAAOO,EAAUU,WACjBQ,YAAY,cACZC,SAAUjB,KAElB,yBAAKpB,UAAU,cACX,2BAAOmC,KAAK,SACRrB,KAAK,aACLH,MAAOO,EAAUY,WACjBM,YAAY,cACZC,SAAUjB,KAElB,yBAAKpB,UAAU,6BACX,4BAAQmC,KAAK,UAAb,UACA,4BAAQA,KAAK,SAASlC,QAASF,EAAMG,kBAArC,a,YCvCT,SAASoC,EAASvC,GAAQ,IAAD,EAEFkB,mBAAS,CACPH,KAAMf,EAAMwC,KAAKzB,KACjBH,MAAOZ,EAAMwC,KAAK5B,QAJlB,mBAE7BO,EAF6B,KAElBC,EAFkB,KAQ9BC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZP,EAAgBO,EAAhBP,KAAMH,EAAUU,EAAVV,MAENQ,GAAa,SAACG,GAAD,mBAAC,eACPA,GADM,kBAERR,EAAOH,QAKlBY,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACjBD,EAAME,kBACFnB,EAAOW,GACNsB,GAAKzC,EAAMwC,KAAKE,IAAX,KACV1C,EAAM2C,WAAWnC,EACbR,EAAMI,YACVJ,EAAM4C,cANW,2CAAH,sDAcd,OACI,0BAAMT,SAAUX,GACZ,yBAAKvB,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRrB,KAAK,OACLH,MAAOO,EAAUJ,KACjBsB,YAAY,cACZC,SAAUjB,KAElB,yBAAKpB,UAAU,cACX,2BAAOmC,KAAK,SACRrB,KAAK,QACLH,MAAOO,EAAUP,MACjByB,YAAY,cACZC,SAAUjB,KAElB,yBAAKpB,UAAU,gBACX,4BAAQmC,KAAK,SAASlC,QAxBd,SAACuB,GACzBA,EAAME,iBACN3B,EAAM4C,gBAsBU,UACA,4BAAQR,KAAK,UAAb,a,MCpDT,SAASS,EAAS7C,GAE7B,IAAM8C,EAAiB,uCAAG,sBAAApB,EAAA,sDACtB1B,EAAM+C,aAAa/C,EAAMwC,KAAKE,IAAX,KAAwB1C,EAAMI,YAD3B,2CAAH,qDAIjB4C,EAAqBC,iBAAO,IAQlC,OANKjD,EAAMkD,SAGPF,EAAmBG,QAAU,WAF7BH,EAAmBG,QAAU,oBAM7B,yBAAKlD,UAAW+C,EAAmBG,SAC/B,yBAAKlD,UAAU,eACf,yBAAKA,UAAU,qBACX,2BAAID,EAAMwC,KAAKzB,OAEnB,yBAAKd,UAAU,SACX,uBAAGA,UAAU,gBAAgBD,EAAMwC,KAAK5B,MAAxC,YAEJ,yBAAKX,UAAU,gBACX,4BAAQmC,KAAK,SAASlC,QAASF,EAAM4C,aAArC,UACA,4BAAQR,KAAK,SAASlC,QAAS4C,GAA/B,Y,kBCzBD,SAASM,EAAkBpD,GAAQ,IAAD,EAGXkB,mBAAS,CACPH,KAAMf,EAAMwC,KAAKzB,KACjBH,MAAOZ,EAAMwC,KAAK5B,MAClByC,MAAOrD,EAAMwC,KAAKa,MAClBC,UAAWtD,EAAMwC,KAAKc,YAPb,mBAGtCnC,EAHsC,KAG3BC,EAH2B,KA0BvCmC,EAAaC,MAAMC,KAAK,CAACC,OAAQC,KAAY,SAACC,EAAGC,GAAJ,OAAUA,EADjD,QAGNC,EAAgBb,iBAAO,CACzBc,QAASC,KAAKC,IAAL,MAAAD,KAAI,YAAQ7C,EAAUmC,YAC/BY,UAAWF,KAAKG,IAAL,MAAAH,KAAI,YAAQ7C,EAAUmC,cAY/BjC,EAAe,SAAC,GAAgB,IATZV,EAAOyD,EAST9C,EAAa,EAAbA,OACZP,EAAsBO,EAAtBP,KAAMH,EAAgBU,EAAhBV,MAEd,OAF8BU,EAATc,MAGjB,IAAK,aACD0B,EAAcX,QAAQpC,GAAQH,EAC9B,MACJ,IAAK,WACD,IAAMyD,GAjBQ1D,EAiByBQ,EAAUkC,MAjB5Be,EAiBmCtC,SAASf,GAhBrEJ,EAAM2D,SAASF,GACfzD,EAAQA,EAAM4D,QAAO,SAAA/B,GAAI,OAAIA,IAAS4B,KAEtCzD,EAAM6D,KAAKJ,GAERzD,GAYCS,GAAa,SAACG,GAAD,mBAAC,eACPA,GADM,IAET8B,MAAOgB,OAEX,MACJ,QACIjD,GAAa,SAACG,GAAD,mBAAC,eACPA,GADM,kBAERR,EAAOH,SAKlBY,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACjBD,EAAME,kBACFnB,EAAOW,GACNsB,GAAKzC,EAAMwC,KAAKE,IAAX,KACVlC,EAAK8C,UAAYE,MAAMC,KAAK,CAACC,OAAQI,EAAcX,QAAQY,QAAQD,EAAcX,QAAQe,UAAU,IAAI,SAACN,EAAGC,GAAJ,OAAUA,EAAEC,EAAcX,QAAQe,aACzIlE,EAAM2C,WAAWnC,EACbR,EAAMI,YACVJ,EAAM4C,cAPW,2CAAH,sDA8Bd,OACI,0BAAMT,SAAUX,GACZ,yBAAKvB,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,2BAAOmC,KAAK,OACRrB,KAAK,OACLH,MAAOO,EAAUJ,KACjBsB,YAAY,cACZC,SAAUjB,KAElB,yBAAKpB,UAAU,cACX,2BAAOmC,KAAK,SACRrB,KAAK,QACLH,MAAOO,EAAUP,MACjByB,YAAY,cACZC,SAAUjB,KAElB,yBAAKpB,UAAU,gBACX,4BAAQmC,KAAK,SAASlC,QAvCd,SAACuB,GACzBA,EAAME,iBACN3B,EAAM4C,gBAqCU,UACA,4BAAQR,KAAK,UAAb,YAGR,yBAAKnC,UAAU,8BACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,UA7GZ,CACf,CAACc,KAAM,UAAW0D,MAAO,GACzB,CAAC1D,KAAM,WAAY0D,MAAO,GAC1B,CAAC1D,KAAM,QAAS0D,MAAO,GACvB,CAAC1D,KAAM,QAAS0D,MAAO,GACvB,CAAC1D,KAAM,MAAO0D,MAAO,GACrB,CAAC1D,KAAM,OAAQ0D,MAAO,GACtB,CAAC1D,KAAM,OAAQ0D,MAAO,GACtB,CAAC1D,KAAM,SAAU0D,MAAO,GACxB,CAAC1D,KAAM,YAAa0D,MAAO,GAC3B,CAAC1D,KAAM,UAAW0D,MAAO,IACzB,CAAC1D,KAAM,WAAY0D,MAAO,IAC1B,CAAC1D,KAAM,WAAY0D,MAAO,KAkGEC,KAAI,SAAAlC,GAAI,OAzChBa,EAyCmCb,EAvCnD,2BAAOmC,IAAKtB,EAAMoB,OACd,2BACIrC,KAAK,WACLrB,KAAMsC,EAAMoB,MACZG,QAASzD,EAAUkC,MAAMiB,SAASjB,EAAMoB,OAExCnC,SAAUjB,IAEbgC,EAAMtC,MAVI,IAACsC,OA4CZ,yBAAKpD,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,WACX,2BAAO4E,QAAQ,aAAf,kBACA,4BAAQpC,GAAG,YAAY1B,KAAK,YAAY+D,aAAchB,EAAcX,QAAQe,UAAW5B,SAAUjB,GAC5FkC,EAAWmB,KAAI,SAAAK,GAAI,OAAI,4BAAQnE,MAAOmE,EAAMJ,IAAKI,GAAOA,OAE7D,2BAAOF,QAAQ,WAAf,aACA,4BAAQpC,GAAG,UAAU1B,KAAK,UAAU+D,aAAchB,EAAcX,QAAQY,QAASzB,SAAUjB,GACtFkC,EAAWmB,KAAI,SAAAK,GAAI,OAAI,4BAAQnE,MAAOmE,EAAMJ,IAAKI,GAAOA,UCjI1E,SAASC,EAAQhF,GAAQ,IAAD,EAEHkB,oBAAS,GAFN,mBAE5B+D,EAF4B,KAElBrC,EAFkB,KAInC,OAAIqC,IAAajF,EAAMkF,YAEf,kBAAC,EAAD,CACItC,YAAaA,EACbJ,KAAMxC,EAAMwC,KACZpC,WAAYJ,EAAMI,WAClBuC,WAAY3C,EAAM2C,WAClBX,KAAMhC,EAAMgC,KACZkD,YAAalF,EAAMkF,cAGpBD,GAAYjF,EAAMkF,YAErB,kBAAC,EAAD,CACItC,YAAaA,EACbJ,KAAMxC,EAAMwC,KACZpC,WAAYJ,EAAMI,WAClBuC,WAAY3C,EAAM2C,WAClBX,KAAMhC,EAAMgC,KACZkD,YAAalF,EAAMkF,cAKvB,kBAAC,EAAD,CACItC,YAAaA,EACbJ,KAAMxC,EAAMwC,KACZpC,WAAYJ,EAAMI,WAClB2C,aAAc/C,EAAM+C,aACpBf,KAAMhC,EAAMgC,KACZkB,SAAUlD,EAAMkD,W,MCnCjB,SAASiC,EAAOnF,GAAQ,IAAD,EAEckB,oBAAS,GAFvB,mBAE3BkE,EAF2B,KAETC,EAFS,OAGkBnE,oBAAS,GAH3B,mBAG3BoE,EAH2B,KAGPC,EAHO,KAK5BpF,EAAmB,WAErBkF,GAAoB,SAAC9D,GAAD,OAAWA,KAC/BgE,GAAsB,SAAChE,GAAD,OAAWA,MAIrC,OACI,6BACA,yBAAKtB,UAAU,YACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,SACf,uBAAGA,UAAU,UAAb,oBAAuC,6BAAvC,2BAKHmF,GAAoB,kBAAE,EAAF,CACjBhD,KAAMpC,EAAMoC,KACZjC,iBAAkBA,IACrBmF,GAAsB,kBAAC,EAAD,CACnBnF,iBAAkBA,EAClByB,UAAW5B,EAAM4B,UACjBI,KAAMhC,EAAMgC,KACZ5B,WAAYJ,EAAMI,c,ICzBToF,E,kDAEjB,WAAYxF,GAAQ,IAAD,8BACf,cAAMA,IAEDyF,MAAQ,CACTC,YAAY,EACZC,cAAc,GAElB,EAAKxF,iBAAmB,EAAKA,iBAAiByF,KAAtB,gBAPT,E,+DAYfrF,KAAKsF,SAAS,CAAEF,cAAepF,KAAKkF,MAAME,eAC1CpF,KAAKsF,SAAS,CAAEH,YAAanF,KAAKkF,MAAMC,e,+BAIlC,IAAD,OACL,OAA+B,IAA3BnF,KAAKP,MAAMQ,KAAKkD,OAEZ,6BACI,kBAAC5C,EAAD,CAAUC,KAAMR,KAAKP,MAAMI,aAC3B,kBAAC,EAAD,CACIA,WAAYG,KAAKP,MAAMI,WACvBwB,UAAWrB,KAAKP,MAAM4B,UACtBI,KAAMzB,KAAKP,MAAMgC,QAMzB,6BACI,kBAAClB,EAAD,CAAUC,KAAMR,KAAKP,MAAMI,aAC1BG,KAAKP,MAAMQ,KAAKkE,KAAI,SAAAlC,GAAI,OAAI,kBAAC,EAAD,CACzBA,KAAMA,EACNpC,WAAY,EAAKJ,MAAMI,WACvB2C,aAAc,EAAK/C,MAAM+C,aACzBJ,WAAY,EAAK3C,MAAM2C,WACvBX,KAAM,EAAKhC,MAAMgC,KACjB2C,IAAKnC,EAAKE,IAAL,KACLQ,UAAU,OACd,kBAAC,EAAD,CAAQ1C,KAAMD,KAAKP,MAAMQ,OACxBD,KAAKkF,MAAMC,YAAc,kBAAE,EAAF,CACtBtF,WAAYG,KAAKP,MAAMI,WACvBD,iBAAkBI,KAAKJ,mBAC1BI,KAAKkF,MAAME,cAAgB,kBAAC,EAAD,CACxBxF,iBAAkBI,KAAKJ,iBACvByB,UAAWrB,KAAKP,MAAM4B,UACtBI,KAAMzB,KAAKP,MAAMgC,KACjB5B,WAAYG,KAAKP,MAAMI,kB,GAnDJS,a,MCN5B,SAASiF,EAAa9F,GAEjC,IAUM+F,EAAc9C,kBAAO,GAQ3B,OANA+C,qBAAU,WACFD,EAAY5C,QACZnD,EAAMiG,yBAAyBjG,EAAMgC,KAAKC,cAAejC,EAAMgC,KAAKE,cACjE6D,EAAY5C,SAAU,IAC9B,CAACnD,EAAMgC,KAAKC,gBAGX,yBAAKhC,UAAU,gBACP,yBAAKA,UAAU,aACX,4BAAQmC,KAAK,SAASlC,QAfd,WACpBF,EAAMkG,aAAa,KAcP,WAEJ,yBAAKjG,UAAU,gBAvBb,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAwB3FD,EAAMgC,KAAKC,eADtB,KACwCjC,EAAMgC,KAAKE,cAEnD,yBAAKjC,UAAU,aACX,4BAAQmC,KAAK,SAASlC,QAzBd,WACpBF,EAAMkG,YAAY,KAwBN,Y,MC7BL,SAASC,EAAanG,GAEjC,IAKMM,EAAWN,EAAMQ,KAAKC,QAAO,SAACC,EAAYC,GAAb,OAAuBD,EAAaC,EAAMC,QAAO,GAEpF,OACI,yBAAKX,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACX,4CAXG,CACX,UAAa,WACb,QAAW,UASsBD,EAAMI,cAEnC,yBAAKH,UAAU,cACX,uBAAGA,UAAU,gBAAgBK,EAA7B,YAEJ,yBAAKL,UAAU,iBACX,4BAAQmC,KAAK,SAASlC,QAAS,kBAAMF,EAAMoG,gBAAe,SAAC7E,GAAD,OAAWA,OAArE,YCpBD,SAAS8E,EAAQrG,GAE5B,IAAMgD,EAAqBC,iBAAO,IAQlC,OANKjD,EAAMkD,SAGPF,EAAmBG,QAAU,QAF7BH,EAAmBG,QAAU,iBAM7B,yBAAKlD,UAAU,OACX,yBAAKA,UAAU,eACf,yBAAKA,UAAW+C,EAAmBG,SAC/B,2BAAInD,EAAMsG,OAEd,yBAAKrG,UAAU,UACf,yBAAKA,UAAU,Y,MCZZ,SAASsG,EAAavG,GAEjC,IAAMwG,EAAS,CACX,UAAa,mBACb,QAAW,kBAGTC,EAAa,UAAMD,EAAOxG,EAAMI,YAAnB,eACbsG,EAAe,UAAMF,EAAOxG,EAAMI,YAAnB,mBARmB,EAUFc,oBAAS,GAVP,mBAUjCyF,EAViC,KAUpBP,EAVoB,KAYxC,OACI,6BACKpG,EAAM4G,UAAY,kBAAC,EAAD,CACfpG,KAAMR,EAAMQ,KAAKqG,OACjBzG,WAAYJ,EAAMI,WAClBgG,eAAgBA,IAEnBO,GAAe,kBAACN,EAAD,CACJC,KAAMG,EACNvD,UAAU,IACrByD,GAAe3G,EAAMQ,KAAKqG,OAAOnC,KAAI,SAAAlC,GAAI,OAAI,kBAAC,EAAD,CAClCA,KAAMA,EACNpC,WAAYJ,EAAMI,WAClBuE,IAAKnC,EAAKE,IAAL,KACLK,aAAc/C,EAAM+C,aACpBJ,WAAY3C,EAAM2C,WAClBuC,aAAa,EACbhC,UAAU,OAErByD,GAAe3G,EAAM8G,aAAa9G,EAAMQ,KAAKqG,SAAW,kBAAC,EAAD,MACxDF,GAAe,kBAACN,EAAD,CACJC,KAAMI,EACNxD,UAAU,IAErByD,GAAe3G,EAAMQ,KAAKuG,SAASrC,KAAI,SAAAlC,GAAI,OAAI,kBAAC,EAAD,CACpCA,KAAMA,EACNpC,WAAYJ,EAAMI,WAClBuE,IAAKnC,EAAKE,IAAL,KACLK,aAAc/C,EAAM+C,aACpBJ,WAAY3C,EAAM2C,WAClBO,UAAU,EACVgC,aAAa,OAExByB,GAAe3G,EAAM8G,aAAa9G,EAAMQ,KAAKuG,WAAa,kBAAC,EAAD,OCjDxD,SAASC,EAAsBhH,GAAQ,IAAD,EAEjBkB,oBAAS,GAFQ,mBAE1C0F,EAF0C,KAEhCK,EAFgC,OAGf/F,mBAAS,IAHM,mBAG1CgG,EAH0C,KAG/BC,EAH+B,KAajDnB,qBAAU,WACN,IAAMoB,EARgB,SAAC5G,GACvB,IAAM6G,EAAU,GAGhB,OAFAA,EAAQR,OAASrG,EAAK+D,QAAO,SAAA/B,GAAI,OAAIA,EAAKa,MAAMiB,SAAStE,EAAMgC,KAAKC,cAAgB,IAAMO,EAAKc,UAAUgB,SAAStE,EAAMgC,KAAKE,iBAC7HmF,EAAQN,SAAWvG,EAAK+D,QAAO,SAAA/B,GAAI,OAAK6E,EAAQR,OAAOvC,SAAS9B,MACzD6E,EAIkBC,CAAkBtH,EAAMQ,MACjD2G,EAAaC,GACRR,GACDK,GAAY,KAGjB,CAACjH,EAAMQ,OAUV,OACI,6BACKoG,GAAY,kBAAC,EAAD,CACTxG,WAAYJ,EAAMI,WAClBI,KAAM0G,EACNN,SAAUA,EACVjE,WAAY3C,EAAM2C,WAClBI,aAAc/C,EAAM+C,aACpB+D,aAhBS,SAACnG,GAClB,OAAqB,IAAjBA,EAAM+C,QAgBF1B,KAAMhC,EAAMQ,KAAKwB,Q,ICpCZuF,E,uKAIb,OAEI,yBAAKtH,UAAU,OACV,kBAAC,EAAD,CACG+B,KAAMzB,KAAKP,MAAMQ,KAAKwB,KACtBkE,YAAa3F,KAAKP,MAAMkG,YACxBD,yBAA0B1F,KAAKP,MAAMiG,2BAC7C,yBAAKhG,UAAU,eACTM,KAAKP,MAAMQ,KAAKgH,SAAW,kBAAC,EAAD,CACrBpH,WAAY,WACZI,KAAMD,KAAKP,MAAMQ,KAAKiH,SACtB7F,UAAWrB,KAAKP,MAAM4B,UACtB8F,WAAYnH,KAAKP,MAAM0H,WACvB3E,aAAcxC,KAAKP,MAAM+C,aACzBJ,WAAYpC,KAAKP,MAAM2C,WACvBX,KAAMzB,KAAKP,MAAMQ,KAAKwB,QAE5BzB,KAAKP,MAAMQ,KAAKgH,SAAW,kBAAC,EAAD,CACrBpH,WAAY,SACZI,KAAMD,KAAKP,MAAMQ,KAAKmH,OACtB/F,UAAWrB,KAAKP,MAAM4B,UACtB8F,WAAYnH,KAAKP,MAAM0H,WACvB3E,aAAcxC,KAAKP,MAAM+C,aACzBJ,WAAYpC,KAAKP,MAAM2C,WACvBX,KAAMzB,KAAKP,MAAMQ,KAAKwB,QAElC,yBAAK/B,UAAU,eACTM,KAAKP,MAAMQ,KAAKgH,SAAW,kBAACR,EAAD,CACrB5G,WAAY,YACZI,KAAMD,KAAKP,MAAMQ,KAAKoH,UACtBjF,WAAYpC,KAAKP,MAAM2C,WACvBI,aAAcxC,KAAKP,MAAM+C,aAEzBf,KAAMzB,KAAKP,MAAMQ,KAAKwB,QAE5BzB,KAAKP,MAAMQ,KAAKgH,SAAW,kBAACR,EAAD,CACrB5G,WAAY,UACZI,KAAMD,KAAKP,MAAMQ,KAAKqH,QACtBlF,WAAYpC,KAAKP,MAAM2C,WACvBI,aAAcxC,KAAKP,MAAM+C,aAEzBf,KAAMzB,KAAKP,MAAMQ,KAAKwB,a,GA7CbnB,aCHZiH,E,kDAEjB,WAAY9H,GAAQ,IAAD,8BACf,cAAMA,IACDyF,MAAQ,CAAG+B,SAAS,EACTxF,KAAM,CAAE+F,cAAc,IAAIC,MAAOC,WACzBC,aAAa,IAAIF,MAAOG,cACxBlG,eAAe,IAAI+F,MAAOC,WAC1B/F,cAAc,IAAI8F,MAAOG,gBAIjD,EAAKT,WAAa,EAAKA,WAAW9B,KAAhB,gBAClB,EAAKhE,UAAY,EAAKA,UAAUgE,KAAf,gBACjB,EAAK7C,aAAe,EAAKA,aAAa6C,KAAlB,gBACpB,EAAKjD,WAAa,EAAKA,WAAWiD,KAAhB,gBAClB,EAAKM,YAAc,EAAKA,YAAYN,KAAjB,gBACnB,EAAKK,yBAA2B,EAAKA,yBAAyBL,KAA9B,gBAfjB,E,uDAkBRxF,EAAYiD,EAAO0B,GAAO,IAAD,OAChCqD,MAAM,UAAD,OAAWhI,GAAa,CACzBiI,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChBjF,MAAOA,EAAQ,EACf0B,KAAMA,EACN3E,WAAYA,KAGnBmI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAY,eAAKpI,EAAaoI,MAC3CD,MAAK,SAAAC,GAAQ,OAAI,EAAK3C,SAAS2C,MAChCE,QAAQC,IAAR,wBAA6BvI,M,+CAGRiD,EAAO0B,GAE5B,IADA,IAAM6D,EAAc,CAAC,SAAU,WAAY,YAAa,WAChD/E,EAAE,EAAGA,EAAE+E,EAAYlF,OAAQG,IAC/BtD,KAAKmH,WAAWkB,EAAY/E,GAAIR,EAAO0B,K,gCAIrCvE,EAAMJ,EAAYiD,EAAO0B,GAAO,IAAD,OACrCqD,MAAM,QAAD,OAAShI,GAAc,CACxBiI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAU,CACjB,KAAQvI,EAAKO,KACb,MAASP,EAAKI,MACd,MAASyC,EAAQ,EACjB,KAAQ0B,MAGfwD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAK3C,SAAL,eAAgBzF,EAAaoI,S,mCAGrC7D,EAAKvE,GAAa,IAAD,OAEvBiD,EAAQ9C,KAAKkF,MAAMzD,KAAKC,cAAgB,EACxC8C,EAAOxE,KAAKkF,MAAMzD,KAAKE,aAE3BkG,MAAM,WAAD,OAAYhI,GAAc,CAC3BiI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAU,CACjB,GAAMpE,EACN,MAAStB,EACT,KAAQ0B,MAGfwD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAK3C,SAAL,eAAgBzF,EAAaoI,S,iCAGvCQ,EAAa5I,GAAa,IAAD,OAGd,aAAfA,GAA4C,WAAfA,IAC7B4I,EAAY3F,MAAQ9C,KAAKkF,MAAMzD,KAAKC,cAAgB,EACpD+G,EAAYjE,KAAOxE,KAAKkF,MAAMzD,KAAKE,cAGvCkG,MAAM,WAAD,OAAYhI,GAAc,CAC3BiI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAUC,KAExBT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAK3C,SAAL,eAAgBzF,EAAaoI,S,kCAGtCS,GAET,IAAIC,EAAW3I,KAAKkF,MAAMzD,KAAKC,cAC3BkH,EAAU5I,KAAKkF,MAAMzD,KAAKE,aAEQ,KAAlC3B,KAAKkF,MAAMzD,KAAKC,eAAwBgH,EAAY,GACpDC,EAAW,EACXC,GAAoB,GACqB,IAAlC5I,KAAKkF,MAAMzD,KAAKC,eAAuBgH,EAAY,GAC1DC,EAAW,GACXC,GAAoB,GAEpBD,GAAsBD,EAG1B1I,KAAKsF,SAAS,CAAC7D,KAAK,2BACbzB,KAAKkF,MAAMzD,MADC,IAEfC,cAAeiH,EACfhH,aAAciH,Q,8JAKd3I,EAAO,GAELoI,EAAc,CAAC,SAAU,WAAY,YAAa,WAChD/E,EAAE,E,YAAGA,EAAE+E,EAAYlF,Q,iCACM0E,MAAM,UAAD,OAAWQ,EAAY/E,IAAK,CAC1DwE,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChBjF,MAAO9C,KAAKkF,MAAMzD,KAAK+F,aAAe,EACtChD,KAAMxE,KAAKkF,MAAMzD,KAAKkG,YACtB9H,WAAYwI,EAAY/E,MAG/B0E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,OAT3BjI,EAAKoI,EAAY/E,I,cADcA,I,uBAanCrD,EAAKgH,SAAU,EACfjH,KAAKsF,SAASrF,G,sIAKd,OAAO,kBAAC,EAAD,CAAKA,KAAMD,KAAKkF,MACnB7D,UAAWrB,KAAKqB,UAChB8F,WAAYnH,KAAKmH,WACjB3E,aAAcxC,KAAKwC,aACnBJ,WAAYpC,KAAKoC,WACjBuD,YAAa3F,KAAK2F,YAClBD,yBAA0B1F,KAAK0F,+B,GAtJDmD,IAAMvI,WCS5BwI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.9e0bfbf7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AddRow.css'\r\n\r\nexport default function AddRow(props) {\r\n  \r\n  const titles = {\r\n    'expences': 'expences',\r\n    'income': 'income',\r\n    'mExpenses': 'per month expences',\r\n    'mIncome': 'per month income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n        <div className=\"leftBorder\"></div>\r\n        <div className=\"title bold\">\r\n            <p onClick={props.changeVisibility} className=\"pointerOnHover\"><i className=\"fas fa-plus-circle\"></i> Add {titles[props.typeOfData]}</p>\r\n        </div>\r\n        <div className=\"value\"></div>\r\n        <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SumRow extends Component {\r\n    render() {\r\n\r\n        const valueSum = this.props.data.reduce((currentSum, array) => currentSum + array.value, 0);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"title bold\">\r\n                  <p>Sum:</p>\r\n                </div>\r\n                <div className=\"value bold\">\r\n                  <p className='numbersAlign'>{valueSum} €</p>\r\n                </div>\r\n                <div className=\"button\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TitleRow(props) {\r\n  \r\n  const titles = {\r\n    'expences': 'Expenses',\r\n    'income': 'Income',\r\n    'mExpenses': 'Per Month Expenses',\r\n    'mIncome': 'Per Month Income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"leftBorder\"></div>\r\n      <div className=\"title bold\">\r\n        <p>{titles[props.name].toUpperCase()}</p>\r\n      </div>\r\n      <div className=\"value\"></div>\r\n      <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport './InputRow.css'\r\n\r\nexport default function InputRow(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({})\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        setUserInput((prev) => ({\r\n            ...prev,\r\n            [name]: value\r\n          }));\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        props.writeToDB({name: userInput.inputTitle, value: parseInt(userInput.inputValue)}, props.typeOfData, props.date.selectedMonth, props.date.selectedYear);\r\n        setUserInput({inputTitle:'', inputValue:''})\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"inputTitle\"\r\n                            value={userInput.inputTitle}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"inputValue\"\r\n                            value={userInput.inputValue}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons inputButtons\">\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                        <button type=\"button\" onClick={props.changeVisibility}>&#xf05e;</button>\r\n                    </div>\r\n                </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport './EditItem.css';\r\n\r\nexport default function EditItem(props) {\r\n    \r\n    const [userInput, setUserInput] = useState({\r\n                                        name: props.item.name, \r\n                                        value: props.item.value,\r\n                                    })\r\n\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        \r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }   \r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        let data = userInput;\r\n        data.id = props.item._id['$oid']\r\n        props.updateInDB(data, \r\n            props.typeOfData);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        props.setEditMode()\r\n    }\r\n \r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"name\"\r\n                            value={userInput.name}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"value\"\r\n                            value={userInput.value}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons\">\r\n                        <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n        }\r\n","import React, {useRef} from 'react'\r\nimport './ShowItem.css';\r\n\r\nexport default function ShowItem(props) {\r\n    \r\n    const handleClickDelete = async () => {\r\n        props.deleteFromDB(props.item._id['$oid'], props.typeOfData);\r\n    }\r\n\r\n    const checkInactiveClass = useRef('')\r\n\r\n    if (!props.isActive) {\r\n        checkInactiveClass.current = \"row item inactive\"\r\n    } else {\r\n        checkInactiveClass.current = \"row item\"\r\n    }\r\n\r\n    return (\r\n        <div className={checkInactiveClass.current} >\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title paddingleft\">\r\n                <p>{props.item.name}</p>\r\n            </div>\r\n            <div className=\"value\">\r\n                <p className=\"numbersAlign\">{props.item.value} €</p>\r\n            </div>\r\n            <div className=\"button trash\">\r\n                <button type=\"button\" onClick={props.setEditMode}>&#xf044;</button>\r\n                <button type=\"button\" onClick={handleClickDelete}>&#xf2ed;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react'\r\nimport './EditRecurrentItem.css';\r\n\r\nexport default function EditRecurrentItem(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({\r\n                                        name: props.item.name, \r\n                                        value: props.item.value,\r\n                                        month: props.item.month,\r\n                                        yearArray: props.item.yearArray\r\n                                    })\r\n\r\n    const monthArray = [\r\n        {name: 'January', label: 1},\r\n        {name: 'February', label: 2},\r\n        {name: 'March', label: 3},\r\n        {name: 'April', label: 4},\r\n        {name: 'May', label: 5},\r\n        {name: 'June', label: 6},\r\n        {name: 'July', label: 7},\r\n        {name: 'August', label: 8},\r\n        {name: 'September', label: 9},\r\n        {name: 'Oktober', label: 10},\r\n        {name: 'November', label: 11},\r\n        {name: 'December', label: 12}\r\n    ];\r\n\r\n    const START=2020, END=2036;\r\n    const yearsArray = Array.from({length: END-START}, (x, i) => i+START)\r\n\r\n    const selectedYears = useRef({\r\n        endYear: Math.max(...userInput.yearArray),\r\n        startYear: Math.min(...userInput.yearArray)\r\n    })                     \r\n\r\n    const changeMonthArray = (array, newValue) => {\r\n        if (array.includes(newValue)){\r\n            array = array.filter(item => item !== newValue)\r\n        } else {\r\n            array.push(newValue)\r\n        }\r\n        return array\r\n    }\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value, type } = target;\r\n        \r\n        switch (type) {\r\n            case \"select-one\":\r\n                selectedYears.current[name] = value;\r\n                break;\r\n            case \"checkbox\":\r\n                const newMonthArray = changeMonthArray(userInput.month, parseInt(name))\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    month: newMonthArray\r\n                }));\r\n                break;\r\n            default:\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        let data = userInput;\r\n        data.id = props.item._id['$oid']\r\n        data.yearArray = Array.from({length: selectedYears.current.endYear-selectedYears.current.startYear+1}, (x, i) => i+selectedYears.current.startYear)\r\n        props.updateInDB(data, \r\n            props.typeOfData);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        props.setEditMode()\r\n    }\r\n\r\n    const createCheckBox = (month) => {\r\n        return (\r\n            <label key={month.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name={month.label}\r\n                    checked={userInput.month.includes(month.label)}\r\n                    \r\n                    onChange={handleChange}\r\n                />\r\n                {month.name}\r\n            </label>\r\n        )\r\n    }\r\n \r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"name\"\r\n                            value={userInput.name}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"value\"\r\n                            value={userInput.value}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons\">\r\n                        <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"labels\">\r\n                        {monthArray.map(item => createCheckBox(item))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower\">\r\n                    <div className=\"leftBorder\"></div>\r\n                        <div className=\"selects\">\r\n                            <label htmlFor=\"startYear\">Starting year:</label>\r\n                            <select id=\"startYear\" name=\"startYear\" defaultValue={selectedYears.current.startYear} onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            <label htmlFor=\"endYear\">End year:</label>\r\n                            <select id=\"endYear\" name=\"endYear\" defaultValue={selectedYears.current.endYear} onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n            </form>\r\n        )\r\n  \r\n\r\n}","import React, { useState } from 'react'\r\nimport './ItemRow.css';\r\nimport EditItem from './EditItem/EditItem'\r\nimport ShowItem from './ShowItem/ShowItem'\r\nimport EditRecurrentItem from './EditRecurrentItem/EditRecurrentItem'\r\n\r\nexport default function ItemRow(props) {\r\n    \r\n    const [editMode, setEditMode] = useState(false);\r\n    \r\n    if (editMode && !props.isMonthData) {\r\n        return (\r\n            <EditItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}\r\n                isMonthData={props.isMonthData}\r\n                />\r\n        )\r\n    } else if (editMode && props.isMonthData) {\r\n        return (\r\n            <EditRecurrentItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}\r\n                isMonthData={props.isMonthData}\r\n                />\r\n        )   \r\n    } else {\r\n        return (\r\n            <ShowItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                deleteFromDB={props.deleteFromDB}\r\n                date={props.date}\r\n                isActive={props.isActive}\r\n                />\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport './NoData.css'\r\nimport InputRow from '../InputRow/InputRow'\r\nimport AddRow from '../AddRow/AddRow'\r\n\r\nexport default function NoData(props) {\r\n    \r\n    const [addRowVisibility, setaddRowVisibility] = useState(true)\r\n    const [inputRowVisibility, setInputRowVisibility] = useState(false)\r\n\r\n    const changeVisibility = () => {\r\n\r\n        setaddRowVisibility((prev) => !prev)\r\n        setInputRowVisibility((prev) => !prev)\r\n\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n        <div className=\"row item\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title\">\r\n            <p className=\"noData\">No Data available<br/>¯\\_(ツ)_/¯</p>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n        {addRowVisibility && < AddRow\r\n            type={props.type}\r\n            changeVisibility={changeVisibility} />}\r\n        {inputRowVisibility && <InputRow\r\n            changeVisibility={changeVisibility}\r\n            writeToDB={props.writeToDB}\r\n            date={props.date}\r\n            typeOfData={props.typeOfData}/>}</div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport AddRow from '../AddRow/AddRow'\r\nimport SumRow from '../SumRow/SumRow'\r\nimport TitleRow from '../TitleRow/TitleRow'\r\nimport './AllRowsOfType.css'\r\nimport InputRow from '../InputRow/InputRow'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport NoData from '../NoData/NoData'\r\n\r\nexport default class AllRowsOfType extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            showAddRow: true,\r\n            showInputRow: false,\r\n        }\r\n        this.changeVisibility = this.changeVisibility.bind(this);\r\n    }\r\n\r\n    changeVisibility() {\r\n\r\n        this.setState({ showInputRow: !this.state.showInputRow })\r\n        this.setState({ showAddRow: !this.state.showAddRow })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data.length === 0) {\r\n            return (\r\n                <div>\r\n                    <TitleRow name={this.props.typeOfData} />\r\n                    <NoData \r\n                        typeOfData={this.props.typeOfData}\r\n                        writeToDB={this.props.writeToDB}\r\n                        date={this.props.date}\r\n                        />\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <TitleRow name={this.props.typeOfData} />\r\n                    {this.props.data.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={this.props.typeOfData}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.date}\r\n                        key={item._id['$oid']}\r\n                        isActive={true} />)}\r\n                    <SumRow data={this.props.data} />\r\n                    {this.state.showAddRow && < AddRow\r\n                        typeOfData={this.props.typeOfData}\r\n                        changeVisibility={this.changeVisibility} />}\r\n                    {this.state.showInputRow && <InputRow\r\n                        changeVisibility={this.changeVisibility}\r\n                        writeToDB={this.props.writeToDB}\r\n                        date={this.props.date}\r\n                        typeOfData={this.props.typeOfData}/>}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport './MonthChanger.css';\r\n\r\nexport default function MonthChanger(props) {\r\n    \r\n    const month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\n    const handleClickNext = () => {\r\n        props.changeMonth(1);\r\n    }\r\n\r\n    const handleClickBack = () => {\r\n        props.changeMonth(-1);\r\n    }\r\n\r\n    const didMountRef = useRef(false) // preventing useEffect to run on the fist page load\r\n\r\n    useEffect(() => {\r\n        if (didMountRef.current){\r\n            props.readAllCollectionsFromDB(props.date.selectedMonth, props.date.selectedYear)\r\n        } else didMountRef.current = true\r\n    }, [props.date.selectedMonth])\r\n\r\n    return (\r\n        <div className=\"monthChanger\">\r\n                <div className=\"prevMonth\">\r\n                    <button type=\"button\" onClick={handleClickBack}>&#xf04a;</button>\r\n                </div>\r\n                <div className=\"currentMonth\">\r\n                    {month[props.date.selectedMonth]}, {props.date.selectedYear}\r\n                </div>\r\n                <div className=\"nextMonth\">\r\n                    <button type=\"button\" onClick={handleClickNext}>&#xf04e;</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './SumMonthData.css';\r\n\r\nexport default function SumMonthData(props) {\r\n\r\n    const titles = {\r\n        'mExpenses': 'expenses',\r\n        'mIncome': 'income'\r\n      }\r\n\r\n    const valueSum = props.data.reduce((currentSum, array) => currentSum + array.value, 0);\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title bold\">\r\n                <p>Total monthly {titles[props.typeOfData]}</p>\r\n            </div>\r\n            <div className=\"value bold\">\r\n                <p className='numbersAlign'>{valueSum} €</p>\r\n            </div>\r\n            <div className=\"button expand\">\r\n                <button type=\"button\" onClick={() => props.setShowDetails((prev) => !prev)}>&#xf150;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef} from 'react'\r\n\r\nexport default function TextRow(props) {\r\n  \r\n    const checkInactiveClass = useRef('')\r\n\r\n    if (!props.isActive) {\r\n        checkInactiveClass.current = \"title inactive\"\r\n    } else {\r\n        checkInactiveClass.current = \"title\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className={checkInactiveClass.current}>\r\n                <p>{props.text}</p>\r\n            </div>\r\n            <div className=\"value\"></div>\r\n            <div className=\"button\"></div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport SumMonthData from '../SumMonthData/SumMonthData'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport TextRow from '../TextRow/TextRow'\r\nimport NoData from '../NoData/NoData'\r\nimport './MDataSummary.css';\r\n\r\nexport default function MDataSummary(props) {\r\n\r\n    const titles = {\r\n        'mExpenses': 'Monthly expenses',\r\n        'mIncome': 'Monthly income'\r\n      }\r\n\r\n    const textForActive = `${titles[props.typeOfData]} this month`\r\n    const textForInactive = `${titles[props.typeOfData]} in other month`\r\n\r\n    const [showDetails, setShowDetails] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            {props.didSplit && <SumMonthData \r\n                data={props.data.active} \r\n                typeOfData={props.typeOfData}\r\n                setShowDetails={setShowDetails}\r\n                />}\r\n            {showDetails && <TextRow \r\n                        text={textForActive}\r\n                        isActive={true}/>}\r\n            {showDetails && props.data.active.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        key={item._id['$oid']}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        isMonthData={true}\r\n                        isActive={true}\r\n                        />)}\r\n            {showDetails && props.arrayIsEmpty(props.data.active) && <NoData />}\r\n            {showDetails && <TextRow \r\n                        text={textForInactive}\r\n                        isActive={false}\r\n                        />}\r\n            {showDetails && props.data.inactive.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        key={item._id['$oid']}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        isActive={false}\r\n                        isMonthData={true}\r\n                        />)}\r\n            {showDetails && props.arrayIsEmpty(props.data.inactive) && <NoData />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport MDataSummary from '../components/MDataSummary/MDataSummary'\r\n\r\nexport default function MDataSummaryContainer(props) {\r\n    \r\n    const [didSplit, setdidSplit] = useState(false)\r\n    const [splitData, setSplitData] = useState([])\r\n\r\n\r\n    const splitDataFunction = (data) => {\r\n        const newData = {}\r\n        newData.active = data.filter(item => item.month.includes(props.date.selectedMonth + 1) && item.yearArray.includes(props.date.selectedYear));\r\n        newData.inactive = data.filter(item => !newData.active.includes(item));\r\n        return newData\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const slitDataForState = splitDataFunction(props.data)\r\n        setSplitData(slitDataForState);\r\n        if (!didSplit){\r\n            setdidSplit(true);\r\n        }\r\n        \r\n    }, [props.data])\r\n    \r\n    const arrayIsEmpty = (array) => {\r\n        if (array.length === 0){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {didSplit && <MDataSummary\r\n                typeOfData={props.typeOfData}\r\n                data={splitData}\r\n                didSplit={didSplit}\r\n                updateInDB={props.updateInDB}\r\n                deleteFromDB={props.deleteFromDB}\r\n                arrayIsEmpty={arrayIsEmpty}\r\n                date={props.data.date}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport AllRowsOfType from '../AllRowsOfType/AllRowsOfType'\r\nimport MonthChanger from '../MonthChanger/MonthChanger'\r\nimport MDataSummaryContainer from '../../containers/MDataSummaryContainer';\r\n\r\nexport default class App extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                 <MonthChanger \r\n                    date={this.props.data.date}\r\n                    changeMonth={this.props.changeMonth}\r\n                    readAllCollectionsFromDB={this.props.readAllCollectionsFromDB}/>\r\n            <div className=\"monthTable\">\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"expences\"}\r\n                        data={this.props.data.expences}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date}\r\n                         />}\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"income\"}\r\n                        data={this.props.data.income}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date} />}\r\n            </div>\r\n            <div className=\"monthTable\">\r\n                {!this.props.data.loading && <MDataSummaryContainer\r\n                        typeOfData={\"mExpenses\"}\r\n                        data={this.props.data.mExpenses}\r\n                        updateInDB={this.props.updateInDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        \r\n                        date={this.props.data.date}\r\n                        />}\r\n                {!this.props.data.loading && <MDataSummaryContainer\r\n                        typeOfData={\"mIncome\"}\r\n                        data={this.props.data.mIncome}\r\n                        updateInDB={this.props.updateInDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        \r\n                        date={this.props.data.date}\r\n                        />}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport App from '../components/App/App'\r\n\r\nexport default class AppContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  loading: true,\r\n                        date: { currentMonth: new Date().getMonth(),\r\n                                currentYear: new Date().getFullYear(),\r\n                                selectedMonth: new Date().getMonth(),\r\n                                selectedYear: new Date().getFullYear()\r\n                            }\r\n                    };\r\n\r\n        this.readFromDB = this.readFromDB.bind(this);\r\n        this.writeToDB = this.writeToDB.bind(this);\r\n        this.deleteFromDB = this.deleteFromDB.bind(this);\r\n        this.updateInDB = this.updateInDB.bind(this);\r\n        this.changeMonth = this.changeMonth.bind(this);\r\n        this.readAllCollectionsFromDB = this.readAllCollectionsFromDB.bind(this);\r\n    }\r\n\r\n    readFromDB(typeOfData, month, year) {\r\n        fetch(`/fetch/${typeOfData}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                month: month + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                year: year,\r\n                typeOfData: typeOfData \r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response})\r\n        .then(response => this.setState(response));\r\n        console.log(`done fetching ${typeOfData}`)\r\n    }\r\n\r\n    readAllCollectionsFromDB(month, year) {\r\n        const collections = ['income', 'expences', 'mExpenses', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            this.readFromDB(collections[i], month, year)\r\n        } \r\n    }\r\n\r\n    writeToDB(data, typeOfData, month, year) {\r\n        fetch(`/add/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": data.name,\r\n                \"value\": data.value,\r\n                \"month\": month + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                \"year\": year\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => this.setState({[typeOfData]: response}))\r\n    }\r\n\r\n    deleteFromDB (key, typeOfData) {\r\n\r\n        var month = this.state.date.selectedMonth + 1; // + 1 because js getdate returns month as digits starting with 0\r\n        var year = this.state.date.selectedYear;        \r\n\r\n        fetch(`/delete/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": key,\r\n                \"month\": month,\r\n                \"year\": year\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => this.setState({[typeOfData]: response}))\r\n    }\r\n\r\n    updateInDB (updatedData, typeOfData) {\r\n        \r\n        //fix the edititem component! remove this shit condition\r\n        if (typeOfData === 'expences' || typeOfData === 'income'){\r\n            updatedData.month = this.state.date.selectedMonth + 1; // + 1 because js getdate returns month as digits starting with 0\r\n            updatedData.year = this.state.date.selectedYear;   \r\n        }\r\n        \r\n        fetch(`/update/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updatedData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => this.setState({[typeOfData]: response}))\r\n    }\r\n\r\n    changeMonth (increment) {\r\n\r\n        var newMonth = this.state.date.selectedMonth;\r\n        var newYear = this.state.date.selectedYear;\r\n\r\n        if (this.state.date.selectedMonth === 11 && increment > 0) {\r\n            newMonth = 0;\r\n            newYear = newYear + 1;\r\n        } else if (this.state.date.selectedMonth === 0 && increment < 0) {\r\n            newMonth = 11;\r\n            newYear = newYear - 1;\r\n        } else {\r\n            newMonth = newMonth + increment;\r\n        }\r\n\r\n        this.setState({date: {\r\n            ...this.state.date,\r\n            selectedMonth: newMonth,\r\n            selectedYear: newYear\r\n        }})\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var data = {};\r\n\r\n        const collections = ['income', 'expences', 'mExpenses', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            data[collections[i]] = await fetch(`/fetch/${collections[i]}`,{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    month: this.state.date.currentMonth + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                    year: this.state.date.currentYear,\r\n                    typeOfData: collections[i]\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n        } \r\n\r\n        data.loading = false;\r\n        this.setState(data);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <App data={this.state}\r\n            writeToDB={this.writeToDB}\r\n            readFromDB={this.readFromDB}\r\n            deleteFromDB={this.deleteFromDB}\r\n            updateInDB={this.updateInDB} \r\n            changeMonth={this.changeMonth}\r\n            readAllCollectionsFromDB={this.readAllCollectionsFromDB}/>;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppContainer from '../src/containers/AppContainer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppContainer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}