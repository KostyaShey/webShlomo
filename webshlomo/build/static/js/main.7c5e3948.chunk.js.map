{"version":3,"sources":["components/AddRow/AddRow.js","components/SumRow/SumRow.js","components/TitleRow/TitleRow.js","components/InputRow/InputRow.js","components/ItemRow/EditItem/EditItem.js","components/ItemRow/ShowItem/ShowItem.js","components/ItemRow/EditRecurrentItem/EditRecurrentItem.js","components/ItemRow/ItemRow.js","components/NoData/NoData.js","components/AllRowsOfType/AllRowsOfType.js","components/MonthChanger/MonthChanger.js","components/SumMonthData/SumMonthData.js","components/TextRow/TextRow.js","components/InputRowRecurrent/InputRowRecurrent.js","components/MDataSummary/MDataSummary.js","containers/MDataSummaryContainer.js","components/App/App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["AddRow","props","className","onClick","setShowInputRow","showInputRow","typeOfData","SumRow","valueSum","this","data","reduce","currentSum","array","value","Component","TitleRow","name","toUpperCase","InputRow","useState","userInput","setUserInput","handleChange","target","prev","handleSubmit","event","a","preventDefault","newData","inputTitle","parseInt","inputValue","month","date","selectedMonth","year","selectedYear","writeToDB","onSubmit","type","placeholder","onChange","EditItem","item","id","_id","updateInDB","setEditMode","ShowItem","handleClickDelete","deleteFromDB","checkInactiveClass","useRef","isActive","current","EditRecurrentItem","yearsArray","Array","from","length","END","x","i","selectedYears","endYear","Math","max","startYear","min","validationWarning","newValue","validateYears","newMonthArray","includes","filter","push","disabled","label","map","key","checked","htmlFor","defaultValue","ItemRow","editMode","isMonthData","NoData","AllRowsOfType","MonthChanger","didMountRef","useEffect","readAllCollectionsFromDB","changeMonth","SumMonthData","setShowDetails","TextRow","text","InputRowRecurrent","console","log","userYearArray","MDataSummary","titles","textForActive","textForInactive","showDetails","didSplit","active","arrayIsEmpty","inactive","MDataSummaryContainer","setdidSplit","splitData","setSplitData","slitDataForState","splitDataFunction","App","loading","expences","readFromDB","income","mExpenses","mIncome","AppContainer","state","currentMonth","Date","getMonth","currentYear","getFullYear","bind","fetch","method","headers","then","response","json","setState","collections","body","JSON","stringify","updatedData","increment","newMonth","newYear","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c5e3948.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AddRow.css'\r\n\r\nexport default function AddRow(props) {\r\n  \r\n  const titles = {\r\n    'expences': 'expenses',\r\n    'income': 'income',\r\n    'mExpenses': 'per month expences',\r\n    'mIncome': 'per month income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n        <div className=\"leftBorder\"></div>\r\n        <div className=\"title bold\">\r\n            <p onClick={() => props.setShowInputRow(!props.showInputRow)} className=\"pointerOnHover\"><i className=\"fas fa-plus-circle\"></i> Add {titles[props.typeOfData]}</p>\r\n        </div>\r\n        <div className=\"value\"></div>\r\n        <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SumRow extends Component {\r\n    render() {\r\n\r\n        const valueSum = this.props.data.reduce((currentSum, array) => currentSum + array.value, 0);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"title bold\">\r\n                  <p>Sum:</p>\r\n                </div>\r\n                <div className=\"value bold\">\r\n                  <p className='numbersAlign'>{valueSum} €</p>\r\n                </div>\r\n                <div className=\"button\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TitleRow(props) {\r\n  \r\n  const titles = {\r\n    'expences': 'Expenses',\r\n    'income': 'Income',\r\n    'mExpenses': 'Per Month Expenses',\r\n    'mIncome': 'Per Month Income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"leftBorder\"></div>\r\n      <div className=\"title bold\">\r\n        <p>{titles[props.name].toUpperCase()}</p>\r\n      </div>\r\n      <div className=\"value\"></div>\r\n      <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport './InputRow.css'\r\n\r\nexport default function InputRow(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({})\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        setUserInput((prev) => ({\r\n            ...prev,\r\n            [name]: value\r\n          }));\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        const newData = {\r\n            name: userInput.inputTitle,\r\n            value: parseInt(userInput.inputValue),\r\n            month: props.date.selectedMonth +1,\r\n            year: props.date.selectedYear\r\n        }\r\n        props.writeToDB(newData, props.typeOfData);\r\n        setUserInput({inputTitle:'', inputValue:''})\r\n    }\r\n\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"inputTitle\"\r\n                            value={userInput.inputTitle}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"inputValue\"\r\n                            value={userInput.inputValue}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons inputButtons\">\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                        <button type=\"button\" onClick={() => props.setShowInputRow(!props.showInputRow)}>&#xf05e;</button>\r\n                    </div>\r\n                </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport './EditItem.css';\r\n\r\nexport default function EditItem(props) {\r\n    \r\n    const [userInput, setUserInput] = useState({\r\n                                        name: props.item.name, \r\n                                        value: props.item.value,\r\n                                    })\r\n\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        \r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }   \r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // preventDefault disables the default requests on submit.\r\n        let data = userInput;\r\n        data.id = props.item._id['$oid'];\r\n        data.month = props.date.selectedMonth +1;\r\n        data.year = props.date.selectedYear;\r\n        props.updateInDB(data, \r\n            props.typeOfData);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // preventDefault disables the default requests on submit.\r\n        props.setEditMode()\r\n    }\r\n \r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"name\"\r\n                            value={userInput.name}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"value\"\r\n                            value={userInput.value}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons\">\r\n                        <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n        }\r\n","import React, {useRef} from 'react'\r\nimport './ShowItem.css';\r\n\r\nexport default function ShowItem(props) {\r\n    \r\n    const handleClickDelete = async () => {\r\n        props.deleteFromDB(props.item._id['$oid'], props.typeOfData);\r\n    }\r\n\r\n    const checkInactiveClass = useRef('')\r\n\r\n    if (!props.isActive) {\r\n        checkInactiveClass.current = \"row item inactive\"\r\n    } else {\r\n        checkInactiveClass.current = \"row item\"\r\n    }\r\n\r\n    return (\r\n        <div className={checkInactiveClass.current} >\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title paddingleft\">\r\n                <p>{props.item.name}</p>\r\n            </div>\r\n            <div className=\"value\">\r\n                <p className=\"numbersAlign\">{props.item.value} €</p>\r\n            </div>\r\n            <div className=\"button trash\">\r\n                <button type=\"button\" onClick={props.setEditMode}>&#xf044;</button>\r\n                <button type=\"button\" onClick={handleClickDelete}>&#xf2ed;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react'\r\nimport './EditRecurrentItem.css';\r\n\r\nexport default function EditRecurrentItem(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({\r\n                                        name: props.item.name, \r\n                                        value: props.item.value,\r\n                                        month: props.item.month,\r\n                                        year: props.item.year\r\n                                    })\r\n\r\n    const monthArray = [\r\n        {name: 'January', label: 1},\r\n        {name: 'February', label: 2},\r\n        {name: 'March', label: 3},\r\n        {name: 'April', label: 4},\r\n        {name: 'May', label: 5},\r\n        {name: 'June', label: 6},\r\n        {name: 'July', label: 7},\r\n        {name: 'August', label: 8},\r\n        {name: 'September', label: 9},\r\n        {name: 'Oktober', label: 10},\r\n        {name: 'November', label: 11},\r\n        {name: 'December', label: 12}\r\n    ];\r\n\r\n    const START=2020, END=2036;\r\n    const yearsArray = Array.from({length: END-START}, (x, i) => i+START)\r\n\r\n    const selectedYears = useRef({\r\n        endYear: Math.max(...userInput.year),\r\n        startYear: Math.min(...userInput.year)\r\n    })                     \r\n\r\n    const validationWarning = useRef(\"\")\r\n\r\n    \r\n\r\n    const validateYears = (name, value) => {\r\n        if (name === 'startYear' && value > selectedYears.current.endYear){\r\n            return 'validationFailed'\r\n        } else if (name === 'endYear' && value < selectedYears.current.startYear){\r\n            return 'validationFailed'\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const changeMonthArray = (array, newValue) => {\r\n        if (array.includes(newValue)){\r\n            array = array.filter(item => item !== newValue)\r\n        } else {\r\n            array.push(newValue)\r\n        }\r\n        return array\r\n    }\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value, type } = target;\r\n        \r\n        switch (type) {\r\n            case \"select-one\":\r\n                validationWarning.current = validateYears(name, value);\r\n                selectedYears.current[name] = parseInt(value);\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    year: Array.from({length: selectedYears.current.endYear-selectedYears.current.startYear+1}, (x, i) => i+selectedYears.current.startYear)\r\n                  }));  \r\n                break;\r\n            case \"checkbox\":\r\n                const newMonthArray = changeMonthArray(userInput.month, parseInt(name))\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    month: newMonthArray\r\n                }));\r\n                break;\r\n            default:\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        let data = userInput;\r\n        data.id = props.item._id['$oid']\r\n        props.updateInDB(data, \r\n            props.typeOfData);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        props.setEditMode()\r\n    }\r\n\r\n    const createCheckBox = (month) => {\r\n        return (\r\n            <label key={month.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name={month.label}\r\n                    checked={userInput.month.includes(month.label)}\r\n                    onChange={handleChange}\r\n                />\r\n                {month.name}\r\n            </label>\r\n        )\r\n    }\r\n \r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"name\"\r\n                            value={userInput.name}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"value\"\r\n                            value={userInput.value}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons\">\r\n                        <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                        <button type=\"submit\" disabled={validationWarning.current}>&#xf00c;</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"labels\">\r\n                        {monthArray.map(item => createCheckBox(item))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower\">\r\n                    <div className=\"leftBorder\"></div>\r\n                        <div className=\"selects\">\r\n                            <label htmlFor=\"startYear\">Starting year:</label>\r\n                            <select id=\"startYear\" name=\"startYear\" defaultValue={selectedYears.current.startYear} onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            <label htmlFor=\"endYear\">End year:</label>\r\n                            <select id=\"endYear\" name=\"endYear\" defaultValue={selectedYears.current.endYear} onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            {validationWarning.current && <warning>End year can't be before start year.</warning>}\r\n                        </div>\r\n                    </div>\r\n            </form>\r\n        )\r\n  \r\n\r\n}","import React, { useState } from 'react'\r\nimport './ItemRow.css';\r\nimport EditItem from './EditItem/EditItem'\r\nimport ShowItem from './ShowItem/ShowItem'\r\nimport EditRecurrentItem from './EditRecurrentItem/EditRecurrentItem'\r\n\r\nexport default function ItemRow(props) {\r\n    \r\n    const [editMode, setEditMode] = useState(false);\r\n    \r\n    if (editMode && !props.isMonthData) {\r\n        return (\r\n            <EditItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}\r\n                isMonthData={props.isMonthData}\r\n                />\r\n        )\r\n    } else if (editMode && props.isMonthData) {\r\n        return (\r\n            <EditRecurrentItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}\r\n                isMonthData={props.isMonthData}\r\n                />\r\n        )   \r\n    } else {\r\n        return (\r\n            <ShowItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                deleteFromDB={props.deleteFromDB}\r\n                date={props.date}\r\n                isActive={props.isActive}\r\n                />\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport './NoData.css'\r\n\r\n\r\nexport default function NoData(props) {\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"row item\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"title\">\r\n                    <p className=\"noData\">No Data available<br/>¯\\_(ツ)_/¯</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddRow from '../AddRow/AddRow'\r\nimport SumRow from '../SumRow/SumRow'\r\nimport TitleRow from '../TitleRow/TitleRow'\r\nimport './AllRowsOfType.css'\r\nimport InputRow from '../InputRow/InputRow'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport NoData from '../NoData/NoData'\r\n\r\nexport default function AllRowsOfType(props) {\r\n\r\n    const [showInputRow, setShowInputRow] = useState(false)\r\n\r\n    if (props.data.length === 0){\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <TitleRow name={props.typeOfData} />\r\n                    <NoData \r\n                        typeOfData={props.typeOfData}\r\n                        writeToDB={props.writeToDB}\r\n                        date={props.date}\r\n                        />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n                <div>\r\n                    <TitleRow name={props.typeOfData} />\r\n                    {props.data.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        date={props.date}\r\n                        key={item._id['$oid']}\r\n                        isActive={true} \r\n                        />)}\r\n                    <SumRow data={props.data} />\r\n                    {!showInputRow && < AddRow\r\n                        setShowInputRow={setShowInputRow}\r\n                        showInputRow={showInputRow}\r\n                        typeOfData={props.typeOfData}\r\n                        />}\r\n                    {showInputRow && <InputRow\r\n                        setShowInputRow={setShowInputRow}\r\n                        showInputRow={showInputRow}\r\n                        writeToDB={props.writeToDB}\r\n                        date={props.date}\r\n                        typeOfData={props.typeOfData}\r\n                        />}\r\n                </div>\r\n                )\r\n    }\r\n\r\n    \r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport './MonthChanger.css';\r\n\r\nexport default function MonthChanger(props) {\r\n    \r\n    const month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\n    const handleClickNext = () => {\r\n        props.changeMonth(1);\r\n    }\r\n\r\n    const handleClickBack = () => {\r\n        props.changeMonth(-1);\r\n    }\r\n\r\n    const didMountRef = useRef(false) // preventing useEffect to run on the fist page load\r\n\r\n    useEffect(() => {\r\n        if (didMountRef.current){\r\n            props.readAllCollectionsFromDB(props.date.selectedMonth, props.date.selectedYear)\r\n        } else didMountRef.current = true\r\n    }, [props.date.selectedMonth])\r\n\r\n    return (\r\n        <div className=\"monthChanger\">\r\n                <div className=\"prevMonth\">\r\n                    <button type=\"button\" onClick={handleClickBack}>&#xf04a;</button>\r\n                </div>\r\n                <div className=\"currentMonth\">\r\n                    {month[props.date.selectedMonth]}, {props.date.selectedYear}\r\n                </div>\r\n                <div className=\"nextMonth\">\r\n                    <button type=\"button\" onClick={handleClickNext}>&#xf04e;</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './SumMonthData.css';\r\n\r\nexport default function SumMonthData(props) {\r\n\r\n    const titles = {\r\n        'mExpenses': 'expenses',\r\n        'mIncome': 'income'\r\n      }\r\n\r\n    const valueSum = props.data.reduce((currentSum, array) => currentSum + array.value, 0);\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title bold\">\r\n                <p>Total monthly {titles[props.typeOfData]}</p>\r\n            </div>\r\n            <div className=\"value bold\">\r\n                <p className='numbersAlign'>{valueSum} €</p>\r\n            </div>\r\n            <div className=\"button expand\">\r\n                <button type=\"button\" onClick={() => props.setShowDetails((prev) => !prev)}>&#xf150;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef} from 'react'\r\n\r\nexport default function TextRow(props) {\r\n  \r\n    const checkInactiveClass = useRef('')\r\n\r\n    if (!props.isActive) {\r\n        checkInactiveClass.current = \"title inactive\"\r\n    } else {\r\n        checkInactiveClass.current = \"title\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"leftBorder\"></div>\r\n            <div className={checkInactiveClass.current}>\r\n                <p>{props.text}</p>\r\n            </div>\r\n            <div className=\"value\"></div>\r\n            <div className=\"button\"></div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useRef } from 'react'\r\nimport './InputRowRecurrent.css'\r\n\r\nexport default function InputRowRecurrent(props) {\r\n    \r\n    const monthArray = [\r\n        {name: 'January', label: 1},\r\n        {name: 'February', label: 2},\r\n        {name: 'March', label: 3},\r\n        {name: 'April', label: 4},\r\n        {name: 'May', label: 5},\r\n        {name: 'June', label: 6},\r\n        {name: 'July', label: 7},\r\n        {name: 'August', label: 8},\r\n        {name: 'September', label: 9},\r\n        {name: 'Oktober', label: 10},\r\n        {name: 'November', label: 11},\r\n        {name: 'December', label: 12}\r\n    ];\r\n\r\n    const selectedMonth = useRef([])\r\n    const validationWarning = useRef(\"\")\r\n\r\n    const START=2020, END=2036;\r\n    const yearsArray = Array.from({length: END-START}, (x, i) => i+START)\r\n    \r\n    const [userInput, setUserInput] = useState({startYear: 2020, endYear: 2020})\r\n\r\n    const changeMonthArray = (array, newValue) => {\r\n        if (array.includes(newValue)){\r\n            array = array.filter(item => item !== newValue)\r\n        } else {\r\n            array.push(newValue)\r\n        }\r\n        return array\r\n    }\r\n\r\n    const createCheckBox = (month) => {\r\n        return (\r\n            <label key={month.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name={month.label}\r\n                    onChange={handleChange}\r\n                    checked={selectedMonth.current.includes(month.label)}\r\n                />\r\n                {month.name}\r\n            </label>\r\n        )\r\n    }\r\n\r\n    const displayValidationWarning = () => {\r\n        \r\n    }\r\n\r\n    const validateYears = (name, value) => {\r\n        if (name === 'startYear' && value > userInput.endYear){\r\n            return 'validationFailed'\r\n        } else if (name === 'endYear' && value < userInput.startYear){\r\n            return 'validationFailed'\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value, type } = target;\r\n        \r\n        switch (type) {\r\n            case \"select-one\":\r\n                console.log(name)\r\n                console.log(value)\r\n                validationWarning.current = validateYears(name, value)\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));              \r\n                break;\r\n            case \"checkbox\":\r\n                const newMonthArray = changeMonthArray(selectedMonth.current, parseInt(name))\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    month: newMonthArray\r\n                }));\r\n                break;\r\n            default:\r\n                setUserInput((prev) => ({\r\n                    ...prev,\r\n                    [name]: value\r\n                  }));\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        const userYearArray = Array.from({length: userInput.endYear-userInput.startYear+1}, (x, i) => i+userInput.startYear);\r\n        const newData = {\r\n            name: userInput.inputTitle,\r\n            value: parseInt(userInput.inputValue),\r\n            month: selectedMonth.current,\r\n            year: userYearArray\r\n        }\r\n        props.writeToDB(newData, props.typeOfData);\r\n        setUserInput({inputTitle:'', inputValue:''});\r\n        selectedMonth.current = [];\r\n        props.setShowInputRow(!props.showInputRow);\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"inputTitle\"\r\n                            value={userInput.inputTitle}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"inputValue\"\r\n                            value={userInput.inputValue}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons inputButtons\">\r\n                        <button type=\"submit\" disabled={validationWarning.current}>&#xf00c;</button>\r\n                        <button type=\"button\" onClick={() => props.setShowInputRow(!props.showInputRow)}>&#xf05e;</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower noBorderBottom\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"labels\">\r\n                        {monthArray.map(item => createCheckBox(item))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row noHower\">\r\n                    <div className=\"leftBorder\"></div>\r\n                        <div className=\"selects\">\r\n                            <label htmlFor=\"startYear\">Starting year:</label>\r\n                            <select id=\"startYear\" name=\"startYear\" onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            <label htmlFor=\"endYear\">End year:</label>\r\n                            <select id=\"endYear\" name=\"endYear\" onChange={handleChange}>\r\n                                {yearsArray.map(year => <option value={year} key={year}>{year}</option>)}\r\n                            </select>\r\n                            {validationWarning.current && <warning>End year can't be before start year.</warning>}\r\n                        </div>\r\n                    </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport SumMonthData from '../SumMonthData/SumMonthData'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport TextRow from '../TextRow/TextRow'\r\nimport NoData from '../NoData/NoData'\r\nimport InputRowRecurrent from '../InputRowRecurrent/InputRowRecurrent'\r\nimport AddRow from '../AddRow/AddRow'\r\nimport './MDataSummary.css';\r\n\r\nexport default function MDataSummary(props) {\r\n\r\n    const titles = {\r\n        'mExpenses': 'Monthly expenses',\r\n        'mIncome': 'Monthly income'\r\n      }\r\n\r\n    const textForActive = `${titles[props.typeOfData]} this month`\r\n    const textForInactive = `${titles[props.typeOfData]} in other month`\r\n\r\n    const [showDetails, setShowDetails] = useState(false)\r\n\r\n    const [showInputRow, setShowInputRow] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            {props.didSplit && <SumMonthData \r\n                data={props.data.active} \r\n                typeOfData={props.typeOfData}\r\n                setShowDetails={setShowDetails}\r\n                />}\r\n            {showDetails && <TextRow \r\n                        text={textForActive}\r\n                        isActive={true}/>}\r\n            {showDetails && props.data.active.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        key={item._id['$oid']}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        isMonthData={true}\r\n                        isActive={true}\r\n                        />)}\r\n            {showDetails && props.arrayIsEmpty(props.data.active) && <NoData />}\r\n            {showDetails && <TextRow \r\n                        text={textForInactive}\r\n                        isActive={false}\r\n                        />}\r\n            {showDetails && props.data.inactive.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={props.typeOfData}\r\n                        key={item._id['$oid']}\r\n                        deleteFromDB={props.deleteFromDB}\r\n                        updateInDB={props.updateInDB}\r\n                        isActive={false}\r\n                        isMonthData={true}\r\n                        />)}\r\n            {showDetails && props.arrayIsEmpty(props.data.inactive) && <NoData />}\r\n            {showDetails && !showInputRow && <AddRow \r\n                                typeOfData={props.typeOfData}\r\n                                setShowInputRow={setShowInputRow}\r\n                                showInputRow={showInputRow}\r\n                                />}\r\n            {showDetails && showInputRow && <InputRowRecurrent \r\n                                setShowInputRow={setShowInputRow}\r\n                                showInputRow={showInputRow}\r\n                                writeToDB={props.writeToDB}\r\n                                date={props.date}\r\n                                typeOfData={props.typeOfData}\r\n                                />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport MDataSummary from '../components/MDataSummary/MDataSummary'\r\n\r\nexport default function MDataSummaryContainer(props) {\r\n    \r\n    const [didSplit, setdidSplit] = useState(false)\r\n    const [splitData, setSplitData] = useState([])\r\n\r\n\r\n    const splitDataFunction = (data) => {\r\n        const newData = {}\r\n        newData.active = data.filter(item => item.month.includes(props.date.selectedMonth + 1) && item.year.includes(props.date.selectedYear));\r\n        newData.inactive = data.filter(item => !newData.active.includes(item));\r\n        return newData\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const slitDataForState = splitDataFunction(props.data)\r\n        setSplitData(slitDataForState);\r\n        if (!didSplit){\r\n            setdidSplit(true);\r\n        }\r\n        \r\n    }, [props.data])\r\n    \r\n    const arrayIsEmpty = (array) => {\r\n        if (array.length === 0){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {didSplit && <MDataSummary\r\n                typeOfData={props.typeOfData}\r\n                data={splitData}\r\n                didSplit={didSplit}\r\n                updateInDB={props.updateInDB}\r\n                deleteFromDB={props.deleteFromDB}\r\n                arrayIsEmpty={arrayIsEmpty}\r\n                date={props.data.date}\r\n                writeToDB={props.writeToDB}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport AllRowsOfType from '../AllRowsOfType/AllRowsOfType'\r\nimport MonthChanger from '../MonthChanger/MonthChanger'\r\nimport MDataSummaryContainer from '../../containers/MDataSummaryContainer';\r\n\r\nexport default class App extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                 <MonthChanger \r\n                    date={this.props.data.date}\r\n                    changeMonth={this.props.changeMonth}\r\n                    readAllCollectionsFromDB={this.props.readAllCollectionsFromDB}/>\r\n            <div className=\"monthTable\">\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"expences\"}\r\n                        data={this.props.data.expences}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date}\r\n                         />}\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"income\"}\r\n                        data={this.props.data.income}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date} />}\r\n            </div>\r\n            <div className=\"monthTable\">\r\n                {!this.props.data.loading && <MDataSummaryContainer\r\n                        typeOfData={\"mExpenses\"}\r\n                        data={this.props.data.mExpenses}\r\n                        updateInDB={this.props.updateInDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        writeToDB={this.props.writeToDB}\r\n                        date={this.props.data.date}\r\n                        />}\r\n                {!this.props.data.loading && <MDataSummaryContainer\r\n                        typeOfData={\"mIncome\"}\r\n                        data={this.props.data.mIncome}\r\n                        updateInDB={this.props.updateInDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        writeToDB={this.props.writeToDB}\r\n                        date={this.props.data.date}\r\n                        />}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport App from '../components/App/App'\r\n\r\nexport default class AppContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  loading: true,\r\n                        date: { currentMonth: new Date().getMonth(),\r\n                                currentYear: new Date().getFullYear(),\r\n                                selectedMonth: new Date().getMonth(),\r\n                                selectedYear: new Date().getFullYear()\r\n                            }\r\n                    };\r\n\r\n        this.readFromDB = this.readFromDB.bind(this);\r\n        this.writeToDB = this.writeToDB.bind(this);\r\n        this.deleteFromDB = this.deleteFromDB.bind(this);\r\n        this.updateInDB = this.updateInDB.bind(this);\r\n        this.changeMonth = this.changeMonth.bind(this);\r\n        this.readAllCollectionsFromDB = this.readAllCollectionsFromDB.bind(this);\r\n    }\r\n\r\n    readFromDB(typeOfData, month, year) {\r\n        fetch(`/fetch/${typeOfData}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                month: month + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                year: year,\r\n                typeOfData: typeOfData \r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response})\r\n        .then(response => this.setState(response));\r\n        console.log(`done fetching ${typeOfData}`)\r\n    }\r\n\r\n    readAllCollectionsFromDB(month, year) {\r\n        const collections = ['income', 'expences', 'mExpenses', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            this.readFromDB(collections[i], month, year)\r\n        } \r\n    }\r\n\r\n    writeToDB(newData, typeOfData) {\r\n        fetch(`/add/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => this.setState({[typeOfData]: response}))\r\n    }\r\n\r\n    deleteFromDB (key, typeOfData) {\r\n\r\n        var month = this.state.date.selectedMonth + 1; // + 1 because js getdate returns month as digits starting with 0\r\n        var year = this.state.date.selectedYear;        \r\n\r\n        fetch(`/delete/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": key,\r\n                \"month\": month,\r\n                \"year\": year\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => this.setState({[typeOfData]: response}))\r\n    }\r\n\r\n    updateInDB (updatedData, typeOfData) {\r\n              \r\n        fetch(`/update/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updatedData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => this.setState({[typeOfData]: response}))\r\n    }\r\n\r\n    changeMonth (increment) {\r\n\r\n        var newMonth = this.state.date.selectedMonth;\r\n        var newYear = this.state.date.selectedYear;\r\n\r\n        if (this.state.date.selectedMonth === 11 && increment > 0) {\r\n            newMonth = 0;\r\n            newYear = newYear + 1;\r\n        } else if (this.state.date.selectedMonth === 0 && increment < 0) {\r\n            newMonth = 11;\r\n            newYear = newYear - 1;\r\n        } else {\r\n            newMonth = newMonth + increment;\r\n        }\r\n\r\n        this.setState({date: {\r\n            ...this.state.date,\r\n            selectedMonth: newMonth,\r\n            selectedYear: newYear\r\n        }})\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var data = {};\r\n\r\n        const collections = ['income', 'expences', 'mExpenses', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            data[collections[i]] = await fetch(`/fetch/${collections[i]}`,{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    month: this.state.date.currentMonth + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                    year: this.state.date.currentYear,\r\n                    typeOfData: collections[i]\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n        } \r\n\r\n        data.loading = false;\r\n        this.setState(data);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <App data={this.state}\r\n            writeToDB={this.writeToDB}\r\n            readFromDB={this.readFromDB}\r\n            deleteFromDB={this.deleteFromDB}\r\n            updateInDB={this.updateInDB} \r\n            changeMonth={this.changeMonth}\r\n            readAllCollectionsFromDB={this.readAllCollectionsFromDB}/>;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppContainer from '../src/containers/AppContainer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppContainer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}