{"version":3,"sources":["components/AddRow/AddRow.js","components/SumRow/SumRow.js","components/TitleRow/TitleRow.js","components/InputRow/InputRow.js","components/ItemRow/EditItem/EditItem.js","components/ItemRow/ShowItem/ShowItem.js","components/ItemRow/ItemRow.js","components/NoData/NoData.js","components/AllRowsOfType/AllRowsOfType.js","components/MonthChanger/MonthChanger.js","components/App/App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["AddRow","props","className","onClick","changeVisibility","typeOfData","SumRow","valueSum","this","data","reduce","currentSum","array","value","Component","TitleRow","name","toUpperCase","InputRow","useState","userInput","setUserInput","handleChange","target","prev","handleSubmit","event","a","preventDefault","writeToDB","inputTitle","parseInt","inputValue","date","selectedMonth","selectedYear","readFromDB","onSubmit","type","placeholder","onChange","item","updateInDB","_id","setEditMode","ShowItem","handleClickDelete","console","log","deleteFromDB","ItemRow","editMode","NoData","addRowVisibility","setaddRowVisibility","inputRowVisibility","setInputRowVisibility","id","AllRowsOfType","state","showAddRow","showInputRow","bind","setState","length","map","key","MonthChanger","didMountRef","useRef","useEffect","current","readAllCollectionsFromDB","changeMonth","App","loading","expences","income","mExpences","mIncome","AppContainer","currentMonth","Date","getMonth","currentYear","getFullYear","month","year","fetch","method","headers","then","response","json","collections","i","body","JSON","stringify","updatedData","increment","newMonth","newYear","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.828fb8d2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AddRow.css'\r\n\r\nexport default function AddRow(props) {\r\n  \r\n  const titles = {\r\n    'expences': 'expences',\r\n    'income': 'income',\r\n    'mExpences': 'per month expences',\r\n    'mIncome': 'per month income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n        <div className=\"leftBorder\"></div>\r\n        <div className=\"title bold\">\r\n            <p onClick={props.changeVisibility} className=\"pointerOnHover\"><i className=\"fas fa-plus-circle\"></i> Add {titles[props.typeOfData]}</p>\r\n        </div>\r\n        <div className=\"value\"></div>\r\n        <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SumRow extends Component {\r\n    render() {\r\n\r\n        const valueSum = this.props.data.reduce((currentSum, array) => currentSum + array.value, 0);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"title bold\">\r\n                  <p>Sum:</p>\r\n                </div>\r\n                <div className=\"value bold\">\r\n                  <p className='numbersAlign'>{valueSum} €</p>\r\n                </div>\r\n                <div className=\"button\"></div>\r\n              </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TitleRow(props) {\r\n  \r\n  const titles = {\r\n    'expences': 'Expences',\r\n    'income': 'Income',\r\n    'mExpences': 'Per Month Expences',\r\n    'mIncome': 'Per Month Income'\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"leftBorder\"></div>\r\n      <div className=\"title bold\">\r\n        <p>{titles[props.name].toUpperCase()}</p>\r\n      </div>\r\n      <div className=\"value\"></div>\r\n      <div className=\"button\"></div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport './InputRow.css'\r\n\r\nexport default function InputRow(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({})\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        setUserInput((prev) => ({\r\n            ...prev,\r\n            [name]: value\r\n          }));\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        await props.writeToDB({name: userInput.inputTitle, value: parseInt(userInput.inputValue)}, props.typeOfData, props.date.selectedMonth, props.date.selectedYear);\r\n        setUserInput({inputTitle:'', inputValue:''})\r\n        props.readFromDB(props.typeOfData, props.date.selectedMonth, props.date.selectedYear);\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <div className=\"row noHover\">\r\n                    <div className=\"leftBorder\"></div>\r\n                    <div className=\"inputTitle\">\r\n                        <input type=\"text\"\r\n                            name=\"inputTitle\"\r\n                            value={userInput.inputTitle}\r\n                            placeholder=\"Input Title\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputValue\">\r\n                        <input type=\"number\"\r\n                            name=\"inputValue\"\r\n                            value={userInput.inputValue}\r\n                            placeholder=\"Input Value\"\r\n                            onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"inputButtons inputButtons\">\r\n                        <button type=\"submit\">&#xf00c;</button>\r\n                        <button type=\"button\" onClick={props.changeVisibility}>&#xf05e;</button>\r\n                    </div>\r\n                </div>\r\n        </form>\r\n    )\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function InputRow(props) {\r\n    \r\n    \r\n    const [userInput, setUserInput] = useState({inputTitle: props.item.name, inputValue: props.item.value})\r\n    \r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n        setUserInput((prev) => ({\r\n            ...prev,\r\n            [name]: value\r\n          }));\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        await props.updateInDB({name: userInput.inputTitle, value: parseInt(userInput.inputValue)}, props.item._id['$oid'], props.typeOfData);\r\n        await props.readFromDB(props.typeOfData, props.date.selectedMonth, props.date.selectedYear);\r\n        props.setEditMode()\r\n    }\r\n\r\n    const handleClickEditMode = (event) => {\r\n        event.preventDefault(); // prevendDefault disables the devault requests on submit.\r\n        props.setEditMode()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"row noHover\">\r\n                <div className=\"leftBorder\"></div>\r\n                <div className=\"inputTitle\">\r\n                    <input type=\"text\"\r\n                        name=\"inputTitle\"\r\n                        value={userInput.inputTitle}\r\n                        placeholder=\"Input Title\"\r\n                        onChange={handleChange} />\r\n                </div>\r\n                <div className=\"inputValue\">\r\n                    <input type=\"number\"\r\n                        name=\"inputValue\"\r\n                        value={userInput.inputValue}\r\n                        placeholder=\"Input Value\"\r\n                        onChange={handleChange} />\r\n                </div>\r\n                <div className=\"inputButtons inputButtons\">\r\n                    <button type=\"button\" onClick={handleClickEditMode}>&#xf05e;</button>\r\n                    <button type=\"submit\">&#xf00c;</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function ShowItem(props) {\r\n    \r\n    const handleClickDelete = async () => {\r\n        console.log(`Click on item ${props.item._id['$oid']}`);\r\n        await props.deleteFromDB(props.item._id['$oid'], props.typeOfData);\r\n        props.readFromDB(props.typeOfData, props.date.selectedMonth, props.date.selectedYear);\r\n    }\r\n\r\n    return (\r\n        <div className=\"row item\" >\r\n            <div className=\"leftBorder\"></div>\r\n            <div className=\"title\">\r\n                <p>{props.item.name}</p>\r\n            </div>\r\n            <div className=\"value\">\r\n                <p className=\"numbersAlign\">{props.item.value} €</p>\r\n            </div>\r\n            <div className=\"button trash\">\r\n                <button type=\"button\" onClick={props.setEditMode}>&#xf044;</button>\r\n                <button type=\"button\" onClick={handleClickDelete}>&#xf2ed;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport './ItemRow.css';\r\nimport EditItem from './EditItem/EditItem'\r\nimport ShowItem from './ShowItem/ShowItem'\r\n\r\nexport default function ItemRow(props) {\r\n    \r\n    const [editMode, setEditMode] = useState(false);\r\n    \r\n    if (editMode) {\r\n        return (\r\n            <EditItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                readFromDB={props.readFromDB}\r\n                updateInDB={props.updateInDB}\r\n                date={props.date}/>\r\n        )\r\n    } else {\r\n        return (\r\n            <ShowItem \r\n                setEditMode={setEditMode}\r\n                item={props.item}\r\n                typeOfData={props.typeOfData}\r\n                deleteFromDB={props.deleteFromDB}\r\n                readFromDB={props.readFromDB}\r\n                date={props.date}\r\n                />\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport './NoData.css'\r\nimport InputRow from '../InputRow/InputRow'\r\nimport AddRow from '../AddRow/AddRow'\r\n\r\nexport default function NoData(props) {\r\n    \r\n    const [addRowVisibility, setaddRowVisibility] = useState(true)\r\n    const [inputRowVisibility, setInputRowVisibility] = useState(false)\r\n\r\n    const changeVisibility = () => {\r\n\r\n        setaddRowVisibility((prev) => !prev)\r\n        setInputRowVisibility((prev) => !prev)\r\n\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <p id=\"noData\">No Data available<br/>¯\\_(ツ)_/¯</p>\r\n            {addRowVisibility && < AddRow\r\n                                            type={props.type}\r\n                                            changeVisibility={changeVisibility} />}\r\n            {inputRowVisibility && <InputRow\r\n                                            changeVisibility={changeVisibility}\r\n                                            writeToDB={props.writeToDB}\r\n                                            readFromDB={props.readFromDB}\r\n                                            date={props.date}\r\n                                            type={props.type}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport AddRow from '../AddRow/AddRow'\r\nimport SumRow from '../SumRow/SumRow'\r\nimport TitleRow from '../TitleRow/TitleRow'\r\nimport './AllRowsOfType.css'\r\nimport InputRow from '../InputRow/InputRow'\r\nimport ItemRow from '../ItemRow/ItemRow'\r\nimport NoData from '../NoData/NoData'\r\n\r\nexport default class AllRowsOfType extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            showAddRow: true,\r\n            showInputRow: false,\r\n        }\r\n        this.changeVisibility = this.changeVisibility.bind(this);\r\n    }\r\n\r\n    changeVisibility() {\r\n\r\n        this.setState({ showInputRow: !this.state.showInputRow })\r\n        this.setState({ showAddRow: !this.state.showAddRow })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data.length === 0) {\r\n            return (\r\n                <div>\r\n                    <TitleRow name={this.props.typeOfData} />\r\n                    <NoData \r\n                        type={this.props.typeOfData}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        date={this.props.date}\r\n                        />\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <TitleRow name={this.props.typeOfData} />\r\n                    {this.props.data.map(item => <ItemRow\r\n                        item={item}\r\n                        typeOfData={this.props.typeOfData}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.date}\r\n                        key={item._id['$oid']} />)}\r\n                    <SumRow data={this.props.data} />\r\n                    {this.state.showAddRow && < AddRow\r\n                        typeOfData={this.props.typeOfData}\r\n                        changeVisibility={this.changeVisibility} />}\r\n                    {this.state.showInputRow && <InputRow\r\n                        changeVisibility={this.changeVisibility}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        date={this.props.date}\r\n                        typeOfData={this.props.typeOfData}/>}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport './MonthChanger.css';\r\n\r\nexport default function MonthChanger(props) {\r\n    \r\n    const month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\n    const handleClickNext = () => {\r\n        props.changeMonth(1);\r\n    }\r\n\r\n    const handleClickBack = () => {\r\n        props.changeMonth(-1);\r\n    }\r\n\r\n    const didMountRef = useRef(false) // preventing useEffect to run on the fist page load\r\n\r\n    useEffect(() => {\r\n        if (didMountRef.current){\r\n            props.readAllCollectionsFromDB(props.date.selectedMonth, props.date.selectedYear)\r\n        } else didMountRef.current = true\r\n    }, [props.date.selectedMonth])\r\n\r\n    return (\r\n        <div className=\"monthChanger\">\r\n                <div className=\"prevMonth\">\r\n                    <button type=\"button\" onClick={handleClickBack}>&#xf04a;</button>\r\n                </div>\r\n                <div className=\"currentMonth\">\r\n                    {month[props.date.selectedMonth]}, {props.date.selectedYear}\r\n                </div>\r\n                <div className=\"nextMonth\">\r\n                    <button type=\"button\" onClick={handleClickNext}>&#xf04e;</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport AllRowsOfType from '../AllRowsOfType/AllRowsOfType'\r\nimport MonthChanger from '../MonthChanger/MonthChanger'\r\n\r\nexport default class App extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                 <MonthChanger \r\n                    date={this.props.data.date}\r\n                    changeMonth={this.props.changeMonth}\r\n                    readAllCollectionsFromDB={this.props.readAllCollectionsFromDB}/>\r\n            <div className=\"monthTable\">\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"expences\"}\r\n                        data={this.props.data.expences}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date}\r\n                         />}\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"income\"}\r\n                        data={this.props.data.income}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date} />}\r\n            </div>\r\n            <div className=\"monthTable\">\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"mExpences\"}\r\n                        data={this.props.data.mExpences}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date} />}\r\n                {!this.props.data.loading && <AllRowsOfType\r\n                        typeOfData={\"mIncome\"}\r\n                        data={this.props.data.mIncome}\r\n                        writeToDB={this.props.writeToDB}\r\n                        readFromDB={this.props.readFromDB}\r\n                        deleteFromDB={this.props.deleteFromDB}\r\n                        updateInDB={this.props.updateInDB}\r\n                        date={this.props.data.date} />}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport App from '../components/App/App'\r\n\r\nexport default class AppContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  loading: true,\r\n                        date: { currentMonth: new Date().getMonth(),\r\n                                currentYear: new Date().getFullYear(),\r\n                                selectedMonth: new Date().getMonth(),\r\n                                selectedYear: new Date().getFullYear()\r\n                            }\r\n                    };\r\n\r\n        this.readFromDB = this.readFromDB.bind(this);\r\n        this.writeToDB = this.writeToDB.bind(this);\r\n        this.deleteFromDB = this.deleteFromDB.bind(this);\r\n        this.updateInDB = this.updateInDB.bind(this);\r\n        this.changeMonth = this.changeMonth.bind(this);\r\n        this.readAllCollectionsFromDB = this.readAllCollectionsFromDB.bind(this);\r\n    }\r\n\r\n    readFromDB(typeOfData, month, year) {\r\n        fetch(`/fetch/${typeOfData}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                month: month + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                year: year,\r\n                typeOfData: typeOfData \r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => response = {[typeOfData]: response})\r\n        .then(response => this.setState(response));\r\n        console.log(`done fetching ${typeOfData}`)\r\n    }\r\n\r\n    readAllCollectionsFromDB(month, year) {\r\n        const collections = ['income', 'expences', 'mExpences', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            this.readFromDB(collections[i], month, year)\r\n        } \r\n    }\r\n\r\n    writeToDB(data, typeOfData, month, year) {\r\n        fetch(`/add/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": data.name,\r\n                \"value\": data.value,\r\n                \"month\": month + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                \"year\": year\r\n            })\r\n        })\r\n    }\r\n\r\n    deleteFromDB (key, typeOfData) {\r\n        fetch(`/delete/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": key\r\n            })\r\n        })\r\n    }\r\n\r\n    updateInDB (updatedData, key, typeOfData) {\r\n        fetch(`/update/${typeOfData}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": key,\r\n                \"name\": updatedData.name,\r\n                \"value\": updatedData.value\r\n            })\r\n        })\r\n    }\r\n\r\n    changeMonth (increment) {\r\n\r\n        var newMonth = this.state.date.selectedMonth;\r\n        var newYear = this.state.date.selectedYear;\r\n\r\n        if (this.state.date.selectedMonth === 11 && increment > 0) {\r\n            newMonth = 0;\r\n            newYear = newYear + 1;\r\n        } else if (this.state.date.selectedMonth === 0 && increment < 0) {\r\n            newMonth = 11;\r\n            newYear = newYear - 1;\r\n        } else {\r\n            newMonth = newMonth + increment;\r\n        }\r\n\r\n        this.setState({date: {\r\n            ...this.state.date,\r\n            selectedMonth: newMonth,\r\n            selectedYear: newYear\r\n        }})\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var data = {};\r\n\r\n        const collections = ['income', 'expences', 'mExpences', 'mIncome']\r\n        for(var i=0; i<collections.length; i++){\r\n            data[collections[i]] = await fetch(`/fetch/${collections[i]}`,{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    month: this.state.date.currentMonth + 1, // + 1 because js getdate returns month as digits starting with 0\r\n                    year: this.state.date.currentYear,\r\n                    typeOfData: collections[i]\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n        } \r\n\r\n        data.loading = false;\r\n        this.setState(data);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <App data={this.state}\r\n            writeToDB={this.writeToDB}\r\n            readFromDB={this.readFromDB}\r\n            deleteFromDB={this.deleteFromDB}\r\n            updateInDB={this.updateInDB} \r\n            changeMonth={this.changeMonth}\r\n            readAllCollectionsFromDB={this.readAllCollectionsFromDB}/>;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppContainer from '../src/containers/AppContainer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppContainer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}